// APartRobot.h: interface for the APartRobot class.
//
//////////////////////////////////////////////////////////////////////

#if !defined(AFX_APARTROBOT_H__F36F38B2_C7E5_4E2F_A33C_05C97C1D61A6__INCLUDED_)
#define AFX_APARTROBOT_H__F36F38B2_C7E5_4E2F_A33C_05C97C1D61A6__INCLUDED_

#if _MSC_VER > 1000
#pragma once
#endif // _MSC_VER > 1000

#include "PartFunction.h"
#include <vector>

enum { JOB_PLACE, JOB_PICK, };
//enum { JOB_BCR, JOB_PLACE, JOB_PICK, };
enum PICKER_STEP
{
	PSTEP_NONE,

	PSTEP_PICK_READY,
	PSTEP_PICK_READY_CHK,
	
	PSTEP_PICK_POGO_BACK,//2012,1225
	PSTEP_PICK_POGO_BACK_CHK,
	PSTEP_PICK_INSERT_BACK,
	PSTEP_PICK_INSERT_BACK_CHK,
	PSTEP_PICK_PICKER_UP1,
	PSTEP_PICK_PICKER_Z_UP, //2014,1029
	PSTEP_PICK_PICKER_Z_UP_CHK, //2014,1029
	PSTEP_PICK_PICKER_UP1_CHK,
	PSTEP_PICK_ROBOT_Z_SAFETY,


	PSTEP_JIG_PICK_PITCH_Z,//2014,0717

	PSTEP_PICK_PLACE_JIG_FOR_MDL_CALC,//2013,0504
	PSTEP_PICK_PLACE_JIG_FOR_MDL_MOVE_START,
	PSTEP_PICK_PLACE_JIG_FOR_MOVE_TARGET,
	PSTEP_JIG_PICK_PITCH_Z_CHK,//2014,0804 ybs
	PSTEP_JIG_PICK_PITCH_Z_RETRY,//2014,0804 ybs
	PSTEP_PICK_PLACE_JIG_FOR_Z_DOWN,
	PSTEP_PICK_PLACE_JIG_FOR_PICKER_DOWN,
	PSTEP_PICK_PLACE_JIG_FOR_PICKER_DOWN_RETRY,//2013,1119
	PSTEP_PICK_PLACE_JIG_FOR_PICKER_DOWN_CHK,
	PSTEP_PICK_PLACE_JIG_FOR_VACUUM_OFF,
	PSTEP_PICK_PLACE_JIG_FOR_VACUUM_EJECTOR_ON,
	PSTEP_PICK_PLACE_JIG_FOR_VACUUM_EJECTOR_OFF,
	PSTEP_PICK_PLACE_JIG_FOR_VACUUM_EJECTOR_OFF_CHK,
	PSTEP_PICK_PICK_JIG_FOR_Z_DOWN,
	PSTEP_PICK_PICK_JIG_FOR_PICKER_DOWN,
	PSTEP_PICK_PICK_JIG_FOR_PICKER_DOWN_SKIP,
	PSTEP_PICK_PICK_JIG_FOR_PICKER_DOWN_RETRY,//2013,1119
	PSTEP_PICK_PICK_JIG_FOR_PICKER_DOWN_CHK,
	PSTEP_PICK_PICK_JIG_FOR_PICKER_VACUUM_ON,
	PSTEP_PICK_PICK_JIG_FOR_PICKER_VACUUM_ON_CHK,
	PSTEP_PICK_PICK_JIG_FOR_PICKER_UP,
	PSTEP_PICK_PICK_JIG_FOR_PICKER_UP_CHK,
	PSTEP_PICK_PICK_JIG_FOR_PICKER_Z_UP,


	PSTEP_PICK_FOR_PITCH_Z, //2014,0717

	PSTEP_PICK_MDL_CALC,
	PSTEP_PICK_MDL_BIN3,     //ybs
	PSTEP_PICK_MDL_MOVEY_START,
	PSTEP_PICK_MDL_MOVEX_START,

	PSTEP_PICK_MDL_MOVEY_CHECK,
	PSTEP_PICK_MDL_MOVEX_CHECK,

	PSTEP_PICK_MOVE_OVERRIDEY_TARGET,
	PSTEP_PICK_MOVE_OVERRIDEX_TARGET,

	PSTEP_PICK_MOVE_X_TARGET,
	PSTEP_PICK_MOVE_Y_TARGET,
	
	PSTEP_PICK_MOVE_X_TARGET_CHECK,
	PSTEP_PICK_MOVE_Y_TARGET_CHECK,

	PSTEP_PICK_MOVE_TARGET,
	PSTEP_PICK_FOR_PITCH_Z_CHK,//2014,0803
	PSTEP_PICK_FOR_PITCH_Z_RETRY,//2014,0804
	PSTEP_PICK_Z_DOWN,
	PSTEP_PICK_PICKER_DOWN,
	PSTEP_PICK_PICKER_DOWN_SKIP, //2013,0110
	PSTEP_PICK_PICKER_DOWN_RETRY,//2013,1119
	PSTEP_PICK_PICKER_DOWN_CHK,
	PSTEP_PICK_VACUUM_ON_ZDOWN,//2013,0215
	PSTEP_PICK_VACUUM_ON_ZDOWN_CHK,//2013,0215
	PSTEP_PICK_VACUUM_ON,
	PSTEP_PICK_VACUUM_ON_CHK,
	PSTEP_PICK_PICKER_UP2,
	PSTEP_PICK_Z_UP_READY,//2014,1029
	PSTEP_PICK_PICKER_UP2_CHK,
	PSTEP_PICK_Z_UP_READY_CHK,//2014,1029
	PSTEP_PICK_Z_UP,
	PSTEP_PICK_FINISH,

	PSTEP_PLACE_READY,
	PSTEP_PLACE_READY_CHK,

	PSTEP_PLACE_CHK_TRANSFER,    //ybs
	PSTEP_PLACE_MOVE_TRANSFER,

	PSTEP_PLACE_REJECT_Z_CHK,
	PSTEP_PLACE_REJECT_GUIDE_BACK,
	PSTEP_PLACE_REJECT_GUIDE_BACK_CHK,
	PSTEP_PLACE_REJECT_Z_MOVE,
	PSTEP_PLACE_REJECT_GUIDE_FORWARD,
	PSTEP_PLACE_REJECT_GUIDE_FORWARD_CHK,


	PSTEP_PLACE_JIG_FOR_PICKERUP,//2013,0131
	PSTEP_PLACE_JIG_FOR_PICKERUP_CHK,
	PSTEP_PLACE_JIG_FOR_ROBOT_Z_SAFETY,

	PSTEP_PLACE_PITCH_JIG,//2014,1029
	
	PSTEP_PLACE_JIG_FOR_MDL_CALC,
	PSTEP_PLACE_JIG_FOR_MDL_MOVE_START,
	PSTEP_PLACE_JIG_FOR_MOVE_TARGET,

	PSTEP_PLACE_JIG_FOR_PITCH_Z, //2014,0717
	PSTEP_PLACE_JIG_FOR_Z_DOWN,
	PSTEP_PLACE_JIG_FOR_PITCH_Z_RETRY,//2014,1029
	PSTEP_PLACE_JIG_FOR_PICKER_DOWN,
	PSTEP_PLACE_JIG_FOR_PICKER_DOWN_RETRY,//2013,1119
	PSTEP_PLACE_JIG_FOR_PICKER_DOWN_CHK,
	PSTEP_PLACE_JIG_FOR_VACUUM_OFF,
	PSTEP_PLACE_JIG_FOR_VACUUM_EJECTOR_ON,
	PSTEP_PLACE_JIG_FOR_VACUUM_EJECTOR_OFF,
	PSTEP_PLACE_JIG_FOR_VACUUM_EJECTOR_OFF_CHK,
	PSTEP_PICK_JIG_FOR_Z_DOWN,
	PSTEP_PICK_JIG_FOR_PICKER_DOWN,
	PSTEP_PICK_JIG_FOR_PICKER_DOWN_SKIP,
	PSTEP_PICK_JIG_FOR_PICKER_DOWN_RETRY,//2013,1119
	PSTEP_PICK_JIG_FOR_PICKER_DOWN_CHK,
	PSTEP_PICK_JIG_FOR_PICKER_VACUUM_ON,
	PSTEP_PICK_JIG_FOR_PICKER_VACUUM_ON_CHK,
	PSTEP_PICK_JIG_FOR_PICKER_UP,
	PSTEP_PICK_JIG_FOR_PICKER_UP_CHK_BEFORE_Z_UP,//2014,1029
	PSTEP_PICK_JIG_FOR_PICKER_UP_CHK,
	PSTEP_PICK_JIG_FOR_PICKER_Z_UP,
	PSTEP_PICK_JIG_FOR_PICKER_Z_UP_RETRY,//2014,1029
	//PSTEP_PLACE_REJECT_Z,
	PSTEP_PLACE_POGO_BACK,//2012,1225
	PSTEP_PLACE_POGO_BACK_CHK,
	PSTEP_PLACE_INSERT_BACK,
	PSTEP_PLACE_INSERT_BACK_CHK,
	PSTEP_PLACE_PICKER_UP1,
	PSTEP_PLACE_PICKER_UP1_CHK,
	PSTEP_PLACE_ROBOT_Z_SAFETY,
	PSTEP_PLACE_MDL_CALC,
	
	PSTEP_PLACE_SITE_FOR_PITCH_Z, //2014,0717


	PSTEP_PLACE_MDL_BIN3,     //ybs
	PSTEP_PLACE_MDL_MOVEY_START,
	PSTEP_PLACE_MDL_MOVEX_START,

	PSTEP_PLACE_MDL_MOVEY_CHECK,
	PSTEP_PLACE_MDL_MOVEX_CHECK,

	PSTEP_PLACE_MOVE_OVERRIDEY_TARGET,
	PSTEP_PLACE_MOVE_OVERRIDEX_TARGET,


	PSTEP_PLACE_MOVE_X_TARGET,
	PSTEP_PLACE_MOVE_Y_TARGET,


	PSTEP_PLACE_MOVE_X_TARGET_CHECK,
	PSTEP_PLACE_MOVE_Y_TARGET_CHECK,


	PSTEP_PLACE_MOVE_TARGET,

	PSTEP_PLACE_SITE_FOR_PITCH_Z_CHK,//2014,0804
	PSTEP_PLACE_SITE_FOR_PITCH_Z_RETRY,//2014,0804
	PSTEP_PLACE_Z_DOWN,
	PSTEP_PLACE_PICKER_DOWN,
	PSTEP_PLACE_PICKER_DOWN_RETRY,//2013,1119
	PSTEP_PLACE_PICKER_DOWN_CHK,
	PSTEP_PLACE_VACUUM_OFF,
	PSTEP_PLACE_VACUUM_EJECTOR_ON,
	PSTEP_PLACE_VACUUM_EJECTOR_OFF,
	PSTEP_PLACE_VACUUM_OFF_CHK,
	PSTEP_PLACE_PICKER_UP2,
	PSTEP_PLACE_PICKER_UP2_BEFORE_Z_UP,//2014,1029
	PSTEP_PLACE_PICKER_UP2_CHK,
	PSTEP_PLACE_Z_UP,
	PSTEP_PLACE_Z_UP_RETRY,//2014,1029
	PSTEP_PLACE_DVC_CHECK,
	PSTEP_PLACE_FINISH,
};
struct stJobPicker
{
	bool bPick;
	int iRobotFirst;
	int iRobotSecond;
	int iRobotThird;
	int iRobotFourth;

	int iPosFirst;
	int iPosSecond;
	int iPosThird;
	int iPosFourth;

	PICKER_STEP picker_step;

	bool bUpSkip;

	stJobPicker()
	{
		bPick = JOB_PICK;

		iRobotFirst = -1;
		iRobotSecond = -1;

		iPosFirst = -1;
		iPosSecond = -1;
		iPosThird = -1;
		iPosFourth = -1;
		picker_step = PSTEP_NONE;
		bUpSkip = false;
	}
	void Set( bool _bPick, int _iRobotFirst, int _iRobotSecond, int _iRobotThird, int _iRobotFourth, int _iPosFirst, int _iPosSecond, int _iPosThird, int _iPosFourth )
	{
		bPick = _bPick;
		iRobotFirst = _iRobotFirst;
		iRobotSecond = _iRobotSecond;
		iRobotThird = _iRobotThird;
		iRobotFourth = _iRobotFourth;
		iPosFirst = _iPosFirst;
		iPosSecond = _iPosSecond;
		iPosThird = _iPosThird;
		iPosFourth = _iPosFourth;
		picker_step = PSTEP_PICK_READY;
		if( _bPick == JOB_PLACE )	picker_step = PSTEP_PLACE_READY;
	}
	
	void Set( bool _bPick, int _iRobotFirst, int _iRobotSecond, int _iPosFirst )
	{
		bPick = _bPick;
		iRobotFirst = _iRobotFirst;
		iRobotSecond = _iRobotSecond;
		iPosFirst = _iPosFirst;
		picker_step = PSTEP_PICK_READY;
		if( _bPick == JOB_PLACE )	picker_step = PSTEP_PLACE_READY;
	}

	ENUM_MODULE_POSITION GetPosByTarget()
	{
		if( iPosFirst < 0 )						return MPOS_NONE;
		if( iPosFirst < MPOS_INDEX_BIN1 )		return MPOS_INDEX_TESTSITE;
		else if( iPosFirst < MPOS_INDEX_BIN2 )	return MPOS_INDEX_BIN1;
		else if( iPosFirst < MPOS_INDEX_BIN3 )	return MPOS_INDEX_BIN2;//ybs
//		else if( iPosFirst < MPOS_INDEX_REJ )	return MPOS_INDEX_BIN2;  //ybs
		else if( iPosFirst < MPOS_INDEX_REJ )	return MPOS_INDEX_BIN3;  
		else if( iPosFirst < MPOS_INDEX_COK_STACKER )	return MPOS_INDEX_REJ;
		else if( iPosFirst < MPOS_INDEX_JIG )	return MPOS_INDEX_COK_STACKER;
		else									return MPOS_INDEX_JIG; //2014,0717
	}

	int GetPosPartByTarget()
	{
		if( GetPosByTarget() == MPOS_INDEX_TESTSITE )
		{
			return (iPosFirst / 5);
		}
		else
		{
			return GetPosByTarget();
		}
	}
};

ENUM_MODULE_POSITION GetPosByTarget( int nTarget );
int GetPosPartByTarget( int nTarget );


class APicker
{
public:
	APicker();
	virtual ~APicker();

	AModule& GetModule() { return m_mdl; }
	void SetModule( AModule mdl ) { m_mdl = mdl; }

protected:
	AModule	m_mdl;

	int m_nTargetPos;
	int m_nPickPos;
};

enum	{ PICKER_CNT = 4, };

class APartRobot  
{
public:
	APartRobot();
	virtual ~APartRobot();

	bool IsPicking();

	int GetJobCount() { return m_vecJob.size(); }
	void AddJob( bool bPick, int iRobotFirst, int iRobotSecond, int iRobotThird, int iRobotFourth, int iPosFirst, int iPosSecond = -1, int iPosThird = -1, int iPosFourth = -1 );
	void AddJob( bool bPick, int iRobotFirst, int iRobotSecond, int iPosFirst );
	stJobPicker& GetFirstJob();
	stJobPicker& GetJob( int iIdx );

	void EraseFirstJob();

	APicker& GetPicker( int iIdx ) { return m_Picker[iIdx]; }

	int GetModuleCnt();

protected:
	APicker	m_Picker[PICKER_CNT];

	std::vector<stJobPicker>	m_vecJob;
	stJobPicker					m_dummyJob;
};

extern APartRobot g_robot;

#endif // !defined(AFX_APARTROBOT_H__F36F38B2_C7E5_4E2F_A33C_05C97C1D61A6__INCLUDED_)
