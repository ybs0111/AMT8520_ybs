// Screen_Motor_With_IO.cpp : implementation file
//

#include "stdafx.h"
#include "handler.h"
#include "Screen_Motor_With_IO.h"
#include "IO_Manager.h"
#include "ComizoaPublic.h"
#include "SrcPart/PartFunction.h"
#include "SrcBase/ALocalization.h"
#include "Run_Motors.h"
#include "SrcPart/APartRobot.h"
#include "SrcPart/APartHandler.h"
#include "Cmmsdk.h"

#ifdef _DEBUG
#define new DEBUG_NEW
#undef THIS_FILE
static char THIS_FILE[] = __FILE__;
#endif

/////////////////////////////////////////////////////////////////////////////
// CScreen_Motor_With_IO

IMPLEMENT_DYNCREATE(CScreen_Motor_With_IO, CFormView)

CScreen_Motor_With_IO::CScreen_Motor_With_IO()
	: CFormView(CScreen_Motor_With_IO::IDD)
{
	//{{AFX_DATA_INIT(CScreen_Motor_With_IO)
		// NOTE: the ClassWizard will add member initialization here
	//}}AFX_DATA_INIT
}

CScreen_Motor_With_IO::~CScreen_Motor_With_IO()
{
}

void CScreen_Motor_With_IO::DoDataExchange(CDataExchange* pDX)
{
	CFormView::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CScreen_Motor_With_IO)
	DDX_Control(pDX, IDC_BTN_PLUS, m_btn_plus);
	DDX_Control(pDX, IDC_BTN_MINUS, m_btn_minus);
	DDX_Control(pDX, IDC_BTN_ROBOT_GO, m_btn_go);
	//}}AFX_DATA_MAP
}


BEGIN_MESSAGE_MAP(CScreen_Motor_With_IO, CFormView)
	//{{AFX_MSG_MAP(CScreen_Motor_With_IO)
	ON_WM_TIMER()
	ON_WM_DESTROY()
	ON_BN_CLICKED(IDC_BTN_ROBOT_GO, OnBtnRobotGo)
	ON_BN_CLICKED(IDC_BTN_HOME, OnBtnHome)
	ON_BN_CLICKED(IDC_BTN_EMG_STOP, OnBtnEmgStop)
	//}}AFX_MSG_MAP
	ON_MESSAGE(SSM_CLICK, OnCellClick)
	ON_MESSAGE(WMU_CHILD_LBUTTON_DOWN, OnUserLButtonDown)
	ON_MESSAGE(WMU_CHILD_LBUTTON_UP, OnUserLButtonUp)
	ON_MESSAGE( WM_MOTOR_COMPLETION, OnMotorCompletion)
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CScreen_Motor_With_IO diagnostics

#ifdef _DEBUG
void CScreen_Motor_With_IO::AssertValid() const
{
	CFormView::AssertValid();
}

void CScreen_Motor_With_IO::Dump(CDumpContext& dc) const
{
	CFormView::Dump(dc);
}
#endif //_DEBUG

/////////////////////////////////////////////////////////////////////////////
// CScreen_Motor_With_IO message handlers

void CScreen_Motor_With_IO::OnInitialUpdate() 
{
	CFormView::OnInitialUpdate();
	
	// TODO: Add your specialized code here and/or call the base class
	OnInitMotor();
	OnInitIO();
	OnInitTarget_TestSite();
	OnInitTarget_Robot();
	OnInitTarget_Tray( IDC_CUSTOM_TARGET_REJECT );
	OnInitTarget_Tray( IDC_CUSTOM_TARGET_TRAY1 );
	OnInitTarget_Tray( IDC_CUSTOM_TARGET_TRAY2 );
	OnInitMotorInfo();

	m_nGo_col = -1;
	m_nGo_row = -1;

	SetTimer(TMR_WITH_IO_READ, 1000, NULL);

	st_handler.cwnd_motor_with_io = this;

	m_nRobot = 0;
	m_nTarget = -1;
	m_nAxis = -1;

	GridColor( IDC_CUSTOM_TARGET_ROBOT, 1, 2, RED_C, BLACK_C );

	m_btn_minus.SetTag(IDC_BTN_MINUS);
	m_btn_plus.SetTag( IDC_BTN_PLUS );
}

void CScreen_Motor_With_IO::OnInitIO()
{
	TSpread* Grid;
	int col = 16;
	int row = 20;
	int i=0;

	int iGrid = IDC_CUSTOM_IO;

	Grid = (TSpread*)GetDlgItem( iGrid );
	Grid -> SetBool(SSB_EDITMODEPERMANENT, TRUE);
	Grid -> SetBool(SSB_SHOWCOLHEADERS, FALSE);
	Grid -> SetBool(SSB_SHOWROWHEADERS, FALSE);
	Grid -> SetBool(SSB_HORZSCROLLBAR, FALSE);
	Grid -> SetBool(SSB_VERTSCROLLBAR, FALSE);
	Grid -> SetMaxRows(row);
	Grid -> SetMaxCols(col);
	
	for( i=0; i<col; i++ )
	{
		if( i % 2 == 0)	Grid->SetColWidthInPixels(i + 1, 120);
		else			Grid->SetColWidthInPixels(i + 1, 20);
	}
	
	for( int iy=0; iy<row; iy++ )
	{
		Grid -> SetRowHeightInPixels(iy + 1, 17 );
		for( int ix=0; ix<col; ix++ )
		{
			GridFont( iGrid, iy + 1, ix + 1, 15);
			GridControl(iGrid, STATIC, iy + 1, ix + 1, 0);

			GridColor( iGrid, iy + 1, ix + 1, WHITE_C, BLACK );
		}
	}

	// BIN
	GridMerge( iGrid, 1, 1, 2, 5 );			GridData( iGrid, 1, 1, "레일" );			GridData( iGrid, 1, 6, "F" );	GridData( iGrid, 2, 6, "B" );
	GridMerge( iGrid, 3, 1, 2, 1 );			GridData( iGrid, 3, 1, "가이드 1");			GridData( iGrid, 3, 2, "F" );	GridData( iGrid, 4, 2, "B" );
	GridMerge( iGrid, 3, 3, 2, 1 );			GridData( iGrid, 3, 3, "가이드 2");			GridData( iGrid, 3, 4, "F" );	GridData( iGrid, 4, 4, "B" );
	GridMerge( iGrid, 3, 5, 2, 1 );			GridData( iGrid, 3, 5, "가이드 3");			GridData( iGrid, 3, 6, "F" );	GridData( iGrid, 4, 6, "B" );
	GridMerge( iGrid, 5, 1, 2, 1 );			GridData( iGrid, 5, 1, "푸셔 1");			GridData( iGrid, 5, 2, "F" );	GridData( iGrid, 6, 2, "B" );
	GridMerge( iGrid, 5, 3, 2, 1 );			GridData( iGrid, 5, 3, "푸셔 2");			GridData( iGrid, 5, 4, "F" );	GridData( iGrid, 6, 4, "B" );
	GridMerge( iGrid, 7, 1, 2, 1 );			GridData( iGrid, 7, 1, "Align 1");			GridData( iGrid, 7, 2, "F" );	GridData( iGrid, 8, 2, "B" );
	GridMerge( iGrid, 7, 3, 2, 1 );			GridData( iGrid, 7, 3, "Align 2");			GridData( iGrid, 7, 4, "F" );	GridData( iGrid, 8, 4, "B" );
	GridMerge( iGrid, 7, 5, 2, 1 );			GridData( iGrid, 7, 5, "Align 3");			GridData( iGrid, 7, 6, "F" );	GridData( iGrid, 8, 6, "B" );
	GridMerge( iGrid, 9, 1, 2, 1 );			GridData( iGrid, 9, 1, "스토퍼 1");			GridData( iGrid, 9, 2, "UP" );	GridData( iGrid, 10, 2, "DN" );
	GridMerge( iGrid, 9, 3, 2, 1 );			GridData( iGrid, 9, 3, "스토퍼 2");			GridData( iGrid, 9, 4, "UP" );	GridData( iGrid, 10, 4, "DN" );
	GridMerge( iGrid, 9, 5, 2, 1 );			GridData( iGrid, 9, 5, "스토퍼 3");			GridData( iGrid, 9, 6, "UP" );	GridData( iGrid, 10, 6, "DN" );
	GridMerge( iGrid, 11, 1, 2, 1 );		GridData( iGrid, 11, 1, "클램프 1");		GridMerge( iGrid, 11,2,2,1 );	GridData( iGrid, 11, 2, "C" );
	GridMerge( iGrid, 11, 3, 2, 1 );		GridData( iGrid, 11, 3, "클램프 2");		GridMerge( iGrid, 11,4,2,1 );	GridData( iGrid, 11, 4, "C" );
	GridMerge( iGrid, 11, 5, 2, 1 );		GridData( iGrid, 11, 5, "클램프 3");		GridMerge( iGrid, 11,6,2,1 );	GridData( iGrid, 11, 6, "C" );
	GridMerge( iGrid, 13, 1, 1, 2 );		GridData( iGrid, 13, 1, "트레이 체크 1");
	GridMerge( iGrid, 13, 3, 1, 2 );		GridData( iGrid, 13, 3, "트레이 체크 2");
	GridMerge( iGrid, 13, 5, 1, 2 );		GridData( iGrid, 13, 5, "트레이 체크 3");
	GridMerge( iGrid, 14, 1, 1, 2 );		GridData( iGrid, 14, 1, "스톱 포지션 1");
	GridMerge( iGrid, 14, 3, 1, 2 );		GridData( iGrid, 14, 3, "스톱 포지션 2");
	GridMerge( iGrid, 14, 5, 1, 2 );		GridData( iGrid, 14, 5, "스톱 포지션 3");
	GridMerge( iGrid, 15, 1, 1, 2 );		GridData( iGrid, 15, 1, "트레이 인 체크");
	GridMerge( iGrid, 16, 1, 1, 2 );		GridData( iGrid, 16, 1, "트레이 방향 체크");

	// ROBOT
	GridMerge( iGrid, 1, 7, 2, 1 );			GridData( iGrid, 1, 7, "그립퍼 다운" );		GridData( iGrid, 1, 8, "UP" ); GridData( iGrid, 2, 8, "DN" );
	GridMerge( iGrid, 3, 7, 2, 1 );			GridData( iGrid, 3, 7, "그립퍼 잡기" );		GridData( iGrid, 3, 8, "F" ); GridData( iGrid, 4, 8, "B" );
	GridMerge( iGrid, 5, 7, 2, 1 );			GridData( iGrid, 5, 7, "픽커 4 다운" );		GridData( iGrid, 5, 8, "UP" ); GridData( iGrid, 6, 8, "DN" );
	GridMerge( iGrid, 7, 7, 2, 1 );			GridData( iGrid, 7, 7, "픽커 3 다운" );		GridData( iGrid, 7, 8, "UP" ); GridData( iGrid, 8, 8, "DN" );
	GridMerge( iGrid, 9, 7, 2, 1 );			GridData( iGrid, 9, 7, "픽커 2 다운" );		GridData( iGrid, 9, 8, "UP" ); GridData( iGrid, 10, 8, "DN" );
	GridMerge( iGrid, 11, 7, 2, 1 );		GridData( iGrid, 11, 7, "픽커 1 다운" );	GridData( iGrid, 11, 8, "UP" ); GridData( iGrid, 12, 8, "DN" );
											GridData( iGrid, 13, 7, "픽커 4 빨기");										GridData( iGrid, 13, 8, "V" );
											GridData( iGrid, 14, 7, "픽커 3 빨기");										GridData( iGrid, 14, 8, "V" );
											GridData( iGrid, 15, 7, "픽커 2 빨기");										GridData( iGrid, 15, 8, "V" );
											GridData( iGrid, 16, 7, "픽커 1 빨기");										GridData( iGrid, 16, 8, "V" );
	GridMerge( iGrid, 17, 7, 1, 2 );		GridData( iGrid, 17, 7, "픽커 4 내뱉기");
	GridMerge( iGrid, 18, 7, 1, 2 );		GridData( iGrid, 18, 7, "픽커 3 내뱉기");
	GridMerge( iGrid, 19, 7, 1, 2 );		GridData( iGrid, 19, 7, "픽커 2 내뱉기");
	GridMerge( iGrid, 20, 7, 1, 2 );		GridData( iGrid, 20, 7, "픽커 1 내뱉기");

	// TEST SITE 1
	GridMerge( iGrid, 1, 9, 2, 1 );			GridData( iGrid, 1, 9, "사이트 1 플레이트");			GridData( iGrid, 1, 10, "F" );	GridData( iGrid, 2, 10, "B" );
	GridMerge( iGrid, 3, 9, 2, 1 );			GridData( iGrid, 3, 9, "COK LOCK" );					GridData( iGrid, 3, 10, "L" );	GridData( iGrid, 4, 10, "UL" );
	GridMerge( iGrid, 5, 9, 2, 1 );			GridData( iGrid, 5, 9, "INSERT 5" );					GridData( iGrid, 5, 10, "F" );	GridData( iGrid, 6, 10, "B" );
	GridMerge( iGrid, 7, 9, 2, 1 );			GridData( iGrid, 7, 9, "INSERT 4" );					GridData( iGrid, 7, 10, "F" );	GridData( iGrid, 8, 10, "B" );
	GridMerge( iGrid, 9, 9, 2, 1 );			GridData( iGrid, 9, 9, "INSERT 3" );					GridData( iGrid, 9, 10, "F" );	GridData( iGrid, 10, 10, "B" );
	GridMerge( iGrid, 11, 9, 2, 1 );		GridData( iGrid, 11, 9, "INSERT 2" );					GridData( iGrid, 11, 10, "F" );	GridData( iGrid, 12, 10, "B" );
	GridMerge( iGrid, 13, 9, 2, 1 );		GridData( iGrid, 13, 9, "INSERT 1" );					GridData( iGrid, 13, 10, "F" );	GridData( iGrid, 14, 10, "B" );
	GridMerge( iGrid, 13, 9, 2, 1 );		GridData( iGrid, 13, 9, "INSERT 1" );					GridData( iGrid, 13, 10, "F" );	GridData( iGrid, 14, 10, "B" );
											GridData( iGrid, 15, 9, "HI-FIX 클램프");				GridData( iGrid, 15, 10, "C" );
	GridMerge( iGrid, 16, 9, 1, 2 );		GridData( iGrid, 16, 9, "HI_FIX 체크");

	// TEST SITE 2
	GridMerge( iGrid, 1, 11, 2, 1 );			GridData( iGrid, 1, 11, "사이트 2 플레이트");			GridData( iGrid, 1, 12, "F" );	GridData( iGrid, 2, 12, "B" );
	GridMerge( iGrid, 3, 11, 2, 1 );			GridData( iGrid, 3, 11, "COK LOCK" );					GridData( iGrid, 3, 12, "L" );	GridData( iGrid, 4, 12, "UL" );
	GridMerge( iGrid, 5, 11, 2, 1 );			GridData( iGrid, 5, 11, "INSERT 5" );					GridData( iGrid, 5, 12, "F" );	GridData( iGrid, 6, 12, "B" );
	GridMerge( iGrid, 7, 11, 2, 1 );			GridData( iGrid, 7, 11, "INSERT 4" );					GridData( iGrid, 7, 12, "F" );	GridData( iGrid, 8, 12, "B" );
	GridMerge( iGrid, 9, 11, 2, 1 );			GridData( iGrid, 9, 11, "INSERT 3" );					GridData( iGrid, 9, 12, "F" );	GridData( iGrid, 10, 12, "B" );
	GridMerge( iGrid, 11, 11, 2, 1 );		GridData( iGrid, 11, 11, "INSERT 2" );					GridData( iGrid, 11, 12, "F" );	GridData( iGrid, 12, 12, "B" );
	GridMerge( iGrid, 13, 11, 2, 1 );		GridData( iGrid, 13, 11, "INSERT 1" );					GridData( iGrid, 13, 12, "F" );	GridData( iGrid, 14, 12, "B" );
	GridMerge( iGrid, 13, 11, 2, 1 );		GridData( iGrid, 13, 11, "INSERT 1" );					GridData( iGrid, 13, 12, "F" );	GridData( iGrid, 14, 12, "B" );
											GridData( iGrid, 15, 11, "HI-FIX 클램프");				GridData( iGrid, 15, 12, "C" );
	GridMerge( iGrid, 16, 11, 1, 2 );		GridData( iGrid, 16, 11, "HI_FIX 체크");

	// COK CHK
	GridData( iGrid, 1, 13, "TS1 COK 10 체크");
	GridData( iGrid, 2, 13, "TS1 COK 09 체크");
	GridData( iGrid, 3, 13, "TS1 COK 08 체크");
	GridData( iGrid, 4, 13, "TS1 COK 07 체크");
	GridData( iGrid, 5, 13, "TS1 COK 06 체크");
	GridData( iGrid, 6, 13, "TS1 COK 05 체크");
	GridData( iGrid, 7, 13, "TS1 COK 04 체크");
	GridData( iGrid, 8, 13, "TS1 COK 03 체크");
	GridData( iGrid, 9, 13, "TS1 COK 02 체크");
	GridData( iGrid, 10, 13, "TS1 COK 01 체크");

	GridData( iGrid, 11, 13, "TS2 COK 10 체크");
	GridData( iGrid, 12, 13, "TS2 COK 09 체크");
	GridData( iGrid, 13, 13, "TS2 COK 08 체크");
	GridData( iGrid, 14, 13, "TS2 COK 07 체크");
	GridData( iGrid, 15, 13, "TS2 COK 06 체크");
	GridData( iGrid, 16, 13, "TS2 COK 05 체크");
	GridData( iGrid, 17, 13, "TS2 COK 04 체크");
	GridData( iGrid, 18, 13, "TS2 COK 03 체크");
	GridData( iGrid, 19, 13, "TS2 COK 02 체크");
	GridData( iGrid, 20, 13, "TS2 COK 01 체크");

	// COK STACKER
	GridMerge( iGrid, 1, 15, 2, 1 );			GridData( iGrid, 1, 15, "COK Stacker LOCK" );					GridData( iGrid, 1, 16, "L" );	GridData( iGrid, 2, 16, "UL" );
	GridMerge( iGrid, 3, 15, 1, 2 );			GridData( iGrid, 3, 15, "Stacker 포지션 체크" );
	GridMerge( iGrid, 4, 15, 1, 2 );			GridData( iGrid, 4, 15, "COK Stacker 1 Top" );
	GridMerge( iGrid, 5, 15, 1, 2 );			GridData( iGrid, 5, 15, "COK Stacker 1 Bottom" );
	GridMerge( iGrid, 6, 15, 1, 2 );			GridData( iGrid, 6, 15, "COK Stacker 2 Top" );
	GridMerge( iGrid, 7, 15, 1, 2 );			GridData( iGrid, 7, 15, "COK Stacker 2 Bottom" );
	GridMerge( iGrid, 8, 15, 1, 2 );			GridData( iGrid, 8, 15, "COK Stacker 3 Top" );
	GridMerge( iGrid, 9, 15, 1, 2 );			GridData( iGrid, 9, 15, "COK Stacker 3 Bottom" );
	GridMerge( iGrid, 10, 15, 1, 2 );			GridData( iGrid, 10, 15, "COK Stacker 4 Top" );
	GridMerge( iGrid, 11, 15, 1, 2 );			GridData( iGrid, 11, 15, "COK Stacker 4 Bottom" );
	GridMerge( iGrid, 12, 15, 1, 2 );			GridData( iGrid, 12, 15, "COK Stacker 5 Top" );
	GridMerge( iGrid, 13, 15, 1, 2 );			GridData( iGrid, 13, 15, "COK Stacker 5 Bottom" );
	GridMerge( iGrid, 14, 15, 1, 2 );			GridData( iGrid, 14, 15, "COK Stacker 6 Top" );
	GridMerge( iGrid, 15, 15, 1, 2 );			GridData( iGrid, 15, 15, "COK Stacker 6 Bottom" );

	// 컨베어
	GridMerge( iGrid, 18, 15, 1, 2 );			GridData( iGrid, 18, 15, "컨베어 1" );
	GridMerge( iGrid, 19, 15, 1, 2 );			GridData( iGrid, 19, 15, "컨베어 2" );
	GridMerge( iGrid, 20, 15, 1, 2 );			GridData( iGrid, 20, 15, "컨베어 3" );

	Grid = NULL;
	delete Grid;
}


void CScreen_Motor_With_IO::GridColor(UINT nID, int row, int col, COLORREF bk, COLORREF tk)
{
	TSpread *Grid = (TSpread*)GetDlgItem(nID);
	
	COLORREF bk_old, tk_old;
	Grid->GetColor(col, row, &bk_old, &tk_old);
	if( bk_old != bk || tk_old != tk )
	{
		Grid->SetColor(col, row, bk, tk);
		Grid->SetBackColorStyle(SS_BACKCOLORSTYLE_UNDERGRID);
	}

	Grid = NULL;
	delete Grid;
}

void CScreen_Motor_With_IO::GridControl(UINT nID, int type, int row, int col, int pos)
{
	TSpread *Grid = (TSpread*)GetDlgItem(nID);
	
	SS_CELLTYPE CellType;
	SS_DATEFORMAT dateFormat = { TRUE, '/', IDF_DDMMYY, FALSE };
	SS_TIMEFORMAT tmFormat;
	CString strList;
	strList = "combo1\tcombo2\tcombo3\tcombo4\tcombo5\tcombo6";
	double a = 0.5;

	switch (type)
	{
		case DATE:			
			Grid->SetTypeDate(&CellType, 0 , &dateFormat, NULL, NULL);
			break;

		case EDIT:
			Grid->SetTypeEdit(&CellType,ES_CENTER,60,SS_CHRSET_CHR,SS_CASE_NOCASE);
			break;

		case COMBO:
			// SetValue(col, row, data); data = ""0"(1선택) data = "1"(2선택) data = "2"(3선택)
			Grid->SetTypeComboBox(&CellType, 0, strList);
			break;

		case BUTTON:
			if (pos == 0)
			{
				Grid->SetTypeButton(&CellType, SBS_DEFPUSHBUTTON, "Go", NULL, SUPERBTN_PICT_NONE,
					NULL, SUPERBTN_PICT_NONE, SUPERBTN_TYPE_NORMAL, 2, NULL);
			}
			else
			{
				Grid->SetTypeButton(&CellType, SBS_DEFPUSHBUTTON, "Read", NULL, SUPERBTN_PICT_NONE,
					NULL, SUPERBTN_PICT_NONE,SUPERBTN_TYPE_NORMAL, 2, NULL);
			}
			break;

		case STATIC:
			Grid->SetTypeStaticText(&CellType, SS_TEXT_CENTER | SS_TEXT_VCENTER);
			break;

		case TIME:
			tmFormat.b24Hour=TRUE;
			tmFormat.bSpin=FALSE;
			tmFormat.bSeconds=FALSE;
			tmFormat.cSeparator=':';
			Grid->SetTypeTime(&CellType, 0, &tmFormat, NULL, NULL);
			break;

		case PERCENT:
			Grid->SetTypePercentEx(&CellType,ES_LEFTALIGN,2,.01,100,".",0,0,0,0,1.001);
			break;

		case CHECK1:
			Grid->SetTypeCheckBox(&CellType,BS_CENTER, "", 
				"CheckUp", BT_BITMAP,
				"CheckDown", BT_BITMAP,
				"CheckFocusUp", BT_BITMAP,
				"CheckFocusDown", BT_BITMAP,
				"CheckDisabledUp", BT_BITMAP,
				"CheckDisabledDown", BT_BITMAP);
			break;

		case NUMBER:
			Grid->SetTypeNumberEx(&CellType,0,pos, 0, 10000,0,".",",",0,0,1,0,1.001);
			break;
	}
	
	Grid->SetCellType(col,row,&CellType);

	Grid = NULL;
	delete Grid;
}

void CScreen_Motor_With_IO::GridData(UINT nID, int row, int col, CString data)
{
	TSpread *Grid = (TSpread*)GetDlgItem(nID);

	Grid->SetValue(col, row, data);

	Grid = NULL;
	delete Grid;
}

void CScreen_Motor_With_IO::GridFont(UINT nID, int row, int col, int size)
{
	TSpread *Grid = (TSpread *)GetDlgItem(nID);
	HFONT font;
	CString strTemp;
	
	font = CreateFont(size, 0, 0, 0, FW_BOLD, 0, 0, 0, 0, 0, 0, 0, 0, "돋음체");
	Grid->SetFont(col, row, font, TRUE);

	Grid = NULL;
	delete Grid;
}

void CScreen_Motor_With_IO::GridMerge(UINT nID, int srow, int scol, int nrow, int ncol)
{
	TSpread *Grid = (TSpread*)GetDlgItem(nID);
	
	Grid->AddCellSpan(scol, srow, ncol, nrow);

	Grid = NULL;
	delete Grid;
}

void CScreen_Motor_With_IO::OnCellClick( WPARAM wParam, LPARAM lParam )
{
	LPSS_CELLCOORD lpcc = (LPSS_CELLCOORD)lParam;

	if( wParam == IDC_CUSTOM_IO )
	{
		if( lpcc->Col == 1 )
		{
			switch( lpcc->Row )
			{
			case 1: case 2:		g_ioMgr.set_out_reverse( st_io.o_bin_stacker_rail_variable_fwd, st_io.o_bin_stacker_rail_variable_bwd );	break;
			case 3:	case 4:		g_ioMgr.set_out_reverse( st_io.o_bin_stacker1_rail_guide_fwdbwd );											break;
			case 5: case 6:		g_ioMgr.set_out_reverse( st_io.o_bin_stacker1_rail_pusher_fwdbwd );											break;
			case 7: case 8:		g_ioMgr.set_out_reverse( st_io.o_bin_tray1_align_fwdbwd );													break;
			case 9: case 10:	g_ioMgr.set_out_reverse( st_io.o_bin_stopper1_updn );														break;
			case 11: case 12:	g_ioMgr.set_out_reverse( st_io.o_bin_elevator1_tray_clamp );												break;
			}
		}
		else if( lpcc->Col == 3 )
		{
			switch( lpcc->Row )
			{
			case 1: case 2:	g_ioMgr.set_out_reverse( st_io.o_bin_stacker_rail_variable_fwd, st_io.o_bin_stacker_rail_variable_bwd );	break;
			case 3:	case 4:	g_ioMgr.set_out_reverse( st_io.o_bin_stacker2_rail_guide_fwdbwd );											break;
			case 5: case 6: g_ioMgr.set_out_reverse( st_io.o_bin_stacker2_rail_pusher_fwdbwd );											break;
			case 7: case 8: g_ioMgr.set_out_reverse( st_io.o_bin_tray2_align_fwdbwd );													break;
			case 9: case 10: g_ioMgr.set_out_reverse( st_io.o_bin_stopper2_updn );														break;
			case 11: case 12: g_ioMgr.set_out_reverse( st_io.o_bin_elevator2_tray_clamp );												break;
			}
		}
		else if( lpcc->Col == 5 )
		{
			switch( lpcc->Row )
			{
			case 1: case 2:	g_ioMgr.set_out_reverse( st_io.o_bin_stacker_rail_variable_fwd, st_io.o_bin_stacker_rail_variable_bwd );	break;
			case 3:	case 4:	g_ioMgr.set_out_reverse( st_io.o_bin_stacker3_rail_guide_fwdbwd );											break;
			case 7: case 8: g_ioMgr.set_out_reverse( st_io.o_bin_tray3_align_fwdbwd );													break;
			case 9: case 10: g_ioMgr.set_out_reverse( st_io.o_bin_stopper3_updn );														break;
			case 11: case 12: g_ioMgr.set_out_reverse( st_io.o_bin_elevator3_tray_clamp );												break;
			}
		}
		else if( lpcc->Col == 7 )
		{
			switch( lpcc->Row )
			{
			case 1:	case 2:	g_ioMgr.set_out_reverse( st_io.o_gripper_updn );	break;
			case 3: case 4:	g_ioMgr.set_out_reverse( st_io.o_gripper );			break;
			case 5: case 6:	g_ioMgr.set_out_reverse( st_io.o_picker4_updn );		break;
			case 7: case 8:	g_ioMgr.set_out_reverse( st_io.o_picker3_updn );		break;
			case 9: case 10:	g_ioMgr.set_out_reverse( st_io.o_picker2_updn );		break;
			case 11: case 12:	g_ioMgr.set_out_reverse( st_io.o_picker1_updn );		break;
			case 13:			g_ioMgr.set_out_reverse( st_io.o_picker4_vacuum );	break;
			case 14:			g_ioMgr.set_out_reverse( st_io.o_picker3_vacuum );	break;
			case 15:			g_ioMgr.set_out_reverse( st_io.o_picker2_vacuum );	break;
			case 16:			g_ioMgr.set_out_reverse( st_io.o_picker1_vacuum );	break;
			case 17:			g_ioMgr.set_out_reverse( st_io.o_picker4_eject );	break;
			case 18:			g_ioMgr.set_out_reverse( st_io.o_picker3_eject );	break;
			case 19:			g_ioMgr.set_out_reverse( st_io.o_picker2_eject );	break;
			case 20:			g_ioMgr.set_out_reverse( st_io.o_picker1_eject );	break;
			}
		}
		else if( lpcc->Col == 9 )
		{
			switch( lpcc->Row )
			{
			case 1: case 2:	g_ioMgr.set_out_reverse( st_io.o_testsite1_cok_plate_fwd, st_io.o_testsite1_cok_plate_bwd );	break;
			case 3: case 4:	g_ioMgr.set_out_reverse( st_io.o_testsite1_cok_lockunlock );		break;
			case 5: case 6:	g_ioMgr.set_out_reverse( st_io.o_testsite1_cok_insert5_fwdbwd );	break;
			case 7: case 8:	g_ioMgr.set_out_reverse( st_io.o_testsite1_cok_insert4_fwdbwd );	break;
			case 9: case 10:	g_ioMgr.set_out_reverse( st_io.o_testsite1_cok_insert3_fwdbwd );	break;
			case 11: case 12:	g_ioMgr.set_out_reverse( st_io.o_testsite1_cok_insert2_fwdbwd );	break;
			case 13: case 14:	g_ioMgr.set_out_reverse( st_io.o_testsite1_cok_insert1_fwdbwd );	break;
			case 15:			g_ioMgr.set_out_reverse( st_io.o_testsite1_hifix_clamp );		break;
			}
		}
		else if( lpcc->Col == 11 )
		{
			switch( lpcc->Row )
			{
			case 1: case 2:	g_ioMgr.set_out_reverse( st_io.o_testsite2_cok_plate_fwd, st_io.o_testsite2_cok_plate_bwd );	break;
			case 3: case 4:	g_ioMgr.set_out_reverse( st_io.o_testsite2_cok_lockunlock );		break;
			case 5: case 6:	g_ioMgr.set_out_reverse( st_io.o_testsite2_cok_insert5_fwdbwd );	break;
			case 7: case 8:	g_ioMgr.set_out_reverse( st_io.o_testsite2_cok_insert4_fwdbwd );	break;
			case 9: case 10:	g_ioMgr.set_out_reverse( st_io.o_testsite2_cok_insert3_fwdbwd );	break;
			case 11: case 12:	g_ioMgr.set_out_reverse( st_io.o_testsite2_cok_insert2_fwdbwd );	break;
			case 13: case 14:	g_ioMgr.set_out_reverse( st_io.o_testsite2_cok_insert1_fwdbwd );	break;
			case 15:			g_ioMgr.set_out_reverse( st_io.o_testsite2_hifix_clamp );		break;

			
			}
		}
		else if( lpcc->Col == 15 )
		{
			switch( lpcc->Row )
			{
			case 1: case 2:		g_ioMgr.set_out_reverse( st_io.o_cok_stacker_lockunlock );
			case 18:			g_ioMgr.set_out_reverse( st_io.o_bin_conveyor1 );				break;
			case 19:			g_ioMgr.set_out_reverse( st_io.o_bin_conveyor2 );				break;
			case 20:			g_ioMgr.set_out_reverse( st_io.o_bin_conveyor3 );				break;
			}
		}
	}

	else if( wParam == IDC_CUSTOM_MOTOR )
	{
		int nAxis = -1;
		int nPos = -1;
		double dGotoPos = 0;

		

		if( lpcc->Col <= 3 )
		{
			switch( lpcc->Row )
			{
			case 1:	nAxis = MOTOR_BIN_1_Z;	dGotoPos = st_motor[MOTOR_BIN_1_Z].d_pos[P_BIN_Z_TOP];		nPos = P_BIN_Z_TOP;			break;
			case 2: nAxis = MOTOR_BIN_1_Z;	dGotoPos = st_motor[MOTOR_BIN_1_Z].d_pos[P_BIN_Z_WAIT];			nPos = P_BIN_Z_WAIT;	break;
			case 3: nAxis = MOTOR_BIN_1_Z;	dGotoPos = st_motor[MOTOR_BIN_1_Z].d_pos[P_BIN_Z_ROTATE];		nPos = P_BIN_Z_ROTATE;	break;
			case 4: nAxis = MOTOR_BIN_1_Z;	dGotoPos = st_motor[MOTOR_BIN_1_Z].d_pos[P_BIN_Z_PUT_ON];		nPos = P_BIN_Z_PUT_ON;	break;
			case 5: nAxis = MOTOR_BIN_1_Z;	dGotoPos = st_motor[MOTOR_BIN_1_Z].d_pos[P_BIN_Z_BASE];			nPos = P_BIN_Z_BASE;	break;

			case 6: nAxis = MOTOR_BIN_1_R;	dGotoPos = st_motor[MOTOR_BIN_1_R].d_pos[P_BIN_R_BASE];		nPos = P_BIN_R_BASE;	break;
			case 7: nAxis = MOTOR_BIN_1_R;	dGotoPos = st_motor[MOTOR_BIN_1_R].d_pos[P_BIN_R_ROTATE];	nPos = P_BIN_R_ROTATE;	break;

			case 8:	nAxis = MOTOR_BIN_2_Z;	dGotoPos = st_motor[MOTOR_BIN_2_Z].d_pos[P_BIN_Z_TOP];			nPos = P_BIN_Z_TOP;	break;
			case 9: nAxis = MOTOR_BIN_2_Z;	dGotoPos = st_motor[MOTOR_BIN_2_Z].d_pos[P_BIN_Z_WAIT];			nPos = P_BIN_Z_WAIT;	break;
			case 10: nAxis = MOTOR_BIN_2_Z;	dGotoPos = st_motor[MOTOR_BIN_2_Z].d_pos[P_BIN_Z_ROTATE];		nPos = P_BIN_Z_ROTATE;	break;
			case 11: nAxis = MOTOR_BIN_2_Z;	dGotoPos = st_motor[MOTOR_BIN_2_Z].d_pos[P_BIN_Z_PUT_ON];		nPos = P_BIN_Z_PUT_ON;	break;
			case 12: nAxis = MOTOR_BIN_2_Z;	dGotoPos = st_motor[MOTOR_BIN_2_Z].d_pos[P_BIN_Z_BASE];			nPos = P_BIN_Z_BASE;	break;

			case 13: nAxis = MOTOR_BIN_2_R;	dGotoPos = st_motor[MOTOR_BIN_2_R].d_pos[P_BIN_R_BASE];		nPos = P_BIN_R_BASE;	break;
			case 14: nAxis = MOTOR_BIN_2_R;	dGotoPos = st_motor[MOTOR_BIN_2_R].d_pos[P_BIN_R_ROTATE];	nPos = P_BIN_R_ROTATE;	break;

			case 15: nAxis = MOTOR_REJECT_Z;	dGotoPos = st_motor[MOTOR_REJECT_Z].d_pos[P_BIN_Z_TOP];		nPos = P_BIN_Z_TOP;	break;
			case 16: nAxis = MOTOR_REJECT_Z;	dGotoPos = st_motor[MOTOR_REJECT_Z].d_pos[P_BIN_Z_WAIT];	nPos = P_BIN_Z_WAIT;	break;
			case 17: nAxis = MOTOR_REJECT_Z;	dGotoPos = st_motor[MOTOR_REJECT_Z].d_pos[P_BIN_Z_ROTATE];	nPos = P_BIN_Z_ROTATE;	break;
			case 18: nAxis = MOTOR_REJECT_Z;	dGotoPos = st_motor[MOTOR_REJECT_Z].d_pos[P_BIN_Z_PUT_ON];	nPos = P_BIN_Z_PUT_ON;	break;
			case 19: nAxis = MOTOR_REJECT_Z;	dGotoPos = st_motor[MOTOR_REJECT_Z].d_pos[P_BIN_Z_BASE];	nPos = P_BIN_Z_BASE;	break;

			case 20: nAxis = MOTOR_REJECT_R;	dGotoPos = st_motor[MOTOR_REJECT_R].d_pos[P_BIN_R_BASE];	nPos = P_BIN_R_BASE;	break;
			case 21: nAxis = MOTOR_REJECT_R;	dGotoPos = st_motor[MOTOR_REJECT_R].d_pos[P_BIN_R_ROTATE];	nPos = P_BIN_R_ROTATE;	break;
			}
		}
		else if( lpcc->Col <= 6 )
		{
			switch( lpcc->Row )
			{
			case 1: nAxis = MOTOR_TRAY_TR_Y;	dGotoPos = st_motor[MOTOR_TRAY_TR_Y].d_pos[P_TRANSFER_Y_REJ];	nPos = P_TRANSFER_Y_REJ;	break;
			case 2: nAxis = MOTOR_TRAY_TR_Y;	dGotoPos = st_motor[MOTOR_TRAY_TR_Y].d_pos[P_TRANSFER_Y_BIN];	nPos = P_TRANSFER_Y_BIN;	break;
			case 3: nAxis = MOTOR_TRAY_TR_CLAMP;	dGotoPos = st_motor[MOTOR_TRAY_TR_CLAMP].d_pos[P_CLAMP_UNCLAMP];nPos = P_CLAMP_UNCLAMP;	break;
			case 4: nAxis = MOTOR_TRAY_TR_CLAMP;	dGotoPos = st_motor[MOTOR_TRAY_TR_CLAMP].d_pos[P_CLAMP_CLAMP];nPos = P_CLAMP_CLAMP;	break;

			case 6: nAxis = MOTOR_TRAY_STACKER;		dGotoPos = st_motor[MOTOR_TRAY_STACKER].d_pos[P_REJ_TRAY_1EA];nPos = P_REJ_TRAY_1EA;	break;
			case 7: nAxis = MOTOR_TRAY_STACKER;		dGotoPos = st_motor[MOTOR_TRAY_STACKER].d_pos[P_REJ_TRAY_5EA];nPos = P_REJ_TRAY_5EA;	break;

			case 10: nAxis = MOTOR_ROBOT_Z;		dGotoPos = st_motor[MOTOR_ROBOT_Z].d_pos[P_Z_COK_SITE1_PLACE_START];nPos = P_Z_COK_SITE1_PLACE_START;	break;
			case 11: nAxis = MOTOR_ROBOT_Z;		dGotoPos = st_motor[MOTOR_ROBOT_Z].d_pos[P_Z_COK_SITE1_PLACE_END];	nPos = P_Z_COK_SITE1_PLACE_END;	break;
			case 12: nAxis = MOTOR_ROBOT_Z;		dGotoPos = st_motor[MOTOR_ROBOT_Z].d_pos[P_Z_COK_SITE1_PICK_START];	nPos = P_Z_COK_SITE1_PICK_START;	break;
			case 13: nAxis = MOTOR_ROBOT_Z;		dGotoPos = st_motor[MOTOR_ROBOT_Z].d_pos[P_Z_COK_SITE1_PICK_END];	nPos = P_Z_COK_SITE1_PICK_END;	break;
			case 14: nAxis = MOTOR_ROBOT_Z;		dGotoPos = st_motor[MOTOR_ROBOT_Z].d_pos[P_Z_COK_SITE2_PLACE_START];nPos = P_Z_COK_SITE2_PLACE_START;	break;
			case 15: nAxis = MOTOR_ROBOT_Z;		dGotoPos = st_motor[MOTOR_ROBOT_Z].d_pos[P_Z_COK_SITE2_PLACE_END];	nPos = P_Z_COK_SITE2_PLACE_END;	break;
			case 16: nAxis = MOTOR_ROBOT_Z;		dGotoPos = st_motor[MOTOR_ROBOT_Z].d_pos[P_Z_COK_SITE2_PICK_START];	nPos = P_Z_COK_SITE2_PICK_START;	break;
			case 17: nAxis = MOTOR_ROBOT_Z;		dGotoPos = st_motor[MOTOR_ROBOT_Z].d_pos[P_Z_COK_SITE2_PICK_END];	nPos = P_Z_COK_SITE2_PICK_END;	break;
			case 18: nAxis = MOTOR_ROBOT_Z;		dGotoPos = st_motor[MOTOR_ROBOT_Z].d_pos[P_Z_COK_STACKER_PLACE_START];nPos = P_Z_COK_STACKER_PLACE_START;	break;
			case 19: nAxis = MOTOR_ROBOT_Z;		dGotoPos = st_motor[MOTOR_ROBOT_Z].d_pos[P_Z_COK_STACKER_PLACE_END];nPos = P_Z_COK_STACKER_PLACE_END;	break;
			case 20: nAxis = MOTOR_ROBOT_Z;		dGotoPos = st_motor[MOTOR_ROBOT_Z].d_pos[P_Z_COK_STACKER_PICK_START];nPos = P_Z_COK_STACKER_PICK_START;	break;
			case 21: nAxis = MOTOR_ROBOT_Z;		dGotoPos = st_motor[MOTOR_ROBOT_Z].d_pos[P_Z_COK_STACKER_PICK_END];	nPos = P_Z_COK_STACKER_PICK_END;	break;
			}
		}
		else if( lpcc->Col <= 9 )
		{
			switch( lpcc->Row )
			{
			case 1: nAxis = MOTOR_ROBOT_Z;		dGotoPos = st_motor[MOTOR_ROBOT_Z].d_pos[P_Z_SAFETY];			nPos = P_Z_SAFETY;	break;
			case 2: nAxis = MOTOR_ROBOT_Z;		dGotoPos = st_motor[MOTOR_ROBOT_Z].d_pos[P_Z_SITE1_PLACE_START];nPos = P_Z_SITE1_PLACE_START;	break;
			case 3: nAxis = MOTOR_ROBOT_Z;		dGotoPos = st_motor[MOTOR_ROBOT_Z].d_pos[P_Z_SITE1_PLACE_END];	nPos = P_Z_SITE1_PLACE_END;	break;
			case 4: nAxis = MOTOR_ROBOT_Z;		dGotoPos = st_motor[MOTOR_ROBOT_Z].d_pos[P_Z_SITE1_PICK_START];	nPos = P_Z_SITE1_PICK_START;	break;
			case 5: nAxis = MOTOR_ROBOT_Z;		dGotoPos = st_motor[MOTOR_ROBOT_Z].d_pos[P_Z_SITE1_PICK_END];	nPos = P_Z_SITE1_PICK_END;	break;
			case 6: nAxis = MOTOR_ROBOT_Z;		dGotoPos = st_motor[MOTOR_ROBOT_Z].d_pos[P_Z_SITE2_PLACE_START];nPos = P_Z_SITE2_PLACE_START;	break;
			case 7: nAxis = MOTOR_ROBOT_Z;		dGotoPos = st_motor[MOTOR_ROBOT_Z].d_pos[P_Z_SITE2_PLACE_END];	nPos = P_Z_SITE2_PLACE_END;	break;
			case 8: nAxis = MOTOR_ROBOT_Z;		dGotoPos = st_motor[MOTOR_ROBOT_Z].d_pos[P_Z_SITE2_PICK_START];	nPos = P_Z_SITE2_PICK_START;	break;
			case 9: nAxis = MOTOR_ROBOT_Z;		dGotoPos = st_motor[MOTOR_ROBOT_Z].d_pos[P_Z_SITE2_PICK_END];	nPos = P_Z_SITE2_PICK_END;	break;
			case 10: nAxis = MOTOR_ROBOT_Z;		dGotoPos = st_motor[MOTOR_ROBOT_Z].d_pos[P_Z_TRAY1_PLACE];		nPos = P_Z_TRAY1_PLACE;break;
			case 11: nAxis = MOTOR_ROBOT_Z;		dGotoPos = st_motor[MOTOR_ROBOT_Z].d_pos[P_Z_TRAY1_PICK];		nPos = P_Z_TRAY1_PICK;break;
			case 12: nAxis = MOTOR_ROBOT_Z;		dGotoPos = st_motor[MOTOR_ROBOT_Z].d_pos[P_Z_TRAY2_PLACE];		nPos = P_Z_TRAY2_PLACE;	break;
			case 13: nAxis = MOTOR_ROBOT_Z;		dGotoPos = st_motor[MOTOR_ROBOT_Z].d_pos[P_Z_TRAY2_PICK];		nPos = P_Z_TRAY2_PICK;break;
			case 14: nAxis = MOTOR_ROBOT_Z;		dGotoPos = st_motor[MOTOR_ROBOT_Z].d_pos[P_Z_REJ_PLACE];		nPos = P_Z_REJ_PLACE;break;
			case 15: nAxis = MOTOR_ROBOT_Z;		dGotoPos = st_motor[MOTOR_ROBOT_Z].d_pos[P_Z_REJ_PICK];		nPos = P_Z_REJ_PICK;break;
			}
		}
		else if( lpcc->Col <= 12 )
		{
			switch( lpcc->Row )
			{
			case 1: nAxis = MOTOR_ROBOT_X;		dGotoPos = st_motor[MOTOR_ROBOT_X].d_pos[P_XY_SAFETY];			nPos = P_XY_SAFETY;break;
			case 2: nAxis = MOTOR_ROBOT_X;		dGotoPos = st_motor[MOTOR_ROBOT_X].d_pos[P_XY_SITE1_START];		nPos = P_XY_SITE1_START;break;
			case 3: nAxis = MOTOR_ROBOT_X;		dGotoPos = st_motor[MOTOR_ROBOT_X].d_pos[P_XY_SITE1_END];		nPos = P_XY_SITE1_END;break;
			case 4: nAxis = MOTOR_ROBOT_X;		dGotoPos = st_motor[MOTOR_ROBOT_X].d_pos[P_XY_SITE2_START];		nPos = P_XY_SITE2_START;break;
			case 5: nAxis = MOTOR_ROBOT_X;		dGotoPos = st_motor[MOTOR_ROBOT_X].d_pos[P_XY_SITE2_END];		nPos = P_XY_SITE2_END;break;
			case 6: nAxis = MOTOR_ROBOT_X;		dGotoPos = st_motor[MOTOR_ROBOT_X].d_pos[P_XY_TRAY1_START];		nPos = P_XY_TRAY1_START;break;
			case 7: nAxis = MOTOR_ROBOT_X;		dGotoPos = st_motor[MOTOR_ROBOT_X].d_pos[P_XY_TRAY1_END];		nPos = P_XY_TRAY1_END;break;
			case 8: nAxis = MOTOR_ROBOT_X;		dGotoPos = st_motor[MOTOR_ROBOT_X].d_pos[P_XY_TRAY2_START];		nPos = P_XY_TRAY2_START;break;
			case 9: nAxis = MOTOR_ROBOT_X;		dGotoPos = st_motor[MOTOR_ROBOT_X].d_pos[P_XY_TRAY2_END];		nPos = P_XY_TRAY2_END;break;
			case 10: nAxis = MOTOR_ROBOT_X;		dGotoPos = st_motor[MOTOR_ROBOT_X].d_pos[P_XY_REJ_START];		nPos = P_XY_REJ_START;break;
			case 11: nAxis = MOTOR_ROBOT_X;		dGotoPos = st_motor[MOTOR_ROBOT_X].d_pos[p_XY_REJ_END];			nPos = p_XY_REJ_END;break;
			case 12: nAxis = MOTOR_ROBOT_X;		dGotoPos = st_motor[MOTOR_ROBOT_X].d_pos[P_XY_COK_SITE1_START];	nPos = P_XY_COK_SITE1_START;	break;
			case 13: nAxis = MOTOR_ROBOT_X;		dGotoPos = st_motor[MOTOR_ROBOT_X].d_pos[P_XY_COK_SITE1_END];	nPos = P_XY_COK_SITE1_END;	break;
			case 14: nAxis = MOTOR_ROBOT_X;		dGotoPos = st_motor[MOTOR_ROBOT_X].d_pos[P_XY_COK_SITE2_START];	nPos = P_XY_COK_SITE2_START;	break;
			case 15: nAxis = MOTOR_ROBOT_X;		dGotoPos = st_motor[MOTOR_ROBOT_X].d_pos[P_XY_COK_SITE2_END];	nPos = P_XY_COK_SITE2_END;	break;
			case 16: nAxis = MOTOR_ROBOT_X;		dGotoPos = st_motor[MOTOR_ROBOT_X].d_pos[P_XY_COK_STACKER_START];nPos = P_XY_COK_STACKER_START;		break;
			case 17: nAxis = MOTOR_ROBOT_X;		dGotoPos = st_motor[MOTOR_ROBOT_X].d_pos[P_XY_COK_STACKER_END];	nPos = P_XY_COK_STACKER_END;	break;
			}
		}
		else if( lpcc->Col <= 15 )
		{
			switch( lpcc->Row )
			{
			case 1: nAxis = MOTOR_ROBOT_Y;		dGotoPos = st_motor[MOTOR_ROBOT_Y].d_pos[P_XY_SAFETY];			nPos = P_XY_SAFETY;break;
			case 2: nAxis = MOTOR_ROBOT_Y;		dGotoPos = st_motor[MOTOR_ROBOT_Y].d_pos[P_XY_SITE1_START];		nPos = P_XY_SITE1_START;break;
			case 3: nAxis = MOTOR_ROBOT_Y;		dGotoPos = st_motor[MOTOR_ROBOT_Y].d_pos[P_XY_SITE1_END];		nPos = P_XY_SITE1_END;break;
			case 4: nAxis = MOTOR_ROBOT_Y;		dGotoPos = st_motor[MOTOR_ROBOT_Y].d_pos[P_XY_SITE2_START];		nPos = P_XY_SITE2_START;break;
			case 5: nAxis = MOTOR_ROBOT_Y;		dGotoPos = st_motor[MOTOR_ROBOT_Y].d_pos[P_XY_SITE2_END];		nPos = P_XY_SITE2_END;break;
			case 6: nAxis = MOTOR_ROBOT_Y;		dGotoPos = st_motor[MOTOR_ROBOT_Y].d_pos[P_XY_TRAY1_START];		nPos = P_XY_TRAY1_START;break;
			case 7: nAxis = MOTOR_ROBOT_Y;		dGotoPos = st_motor[MOTOR_ROBOT_Y].d_pos[P_XY_TRAY1_END];		nPos = P_XY_TRAY1_END;break;
			case 8: nAxis = MOTOR_ROBOT_Y;		dGotoPos = st_motor[MOTOR_ROBOT_Y].d_pos[P_XY_TRAY2_START];		nPos = P_XY_TRAY2_START;break;
			case 9: nAxis = MOTOR_ROBOT_Y;		dGotoPos = st_motor[MOTOR_ROBOT_Y].d_pos[P_XY_TRAY2_END];		nPos = P_XY_TRAY2_END;break;
			case 10: nAxis = MOTOR_ROBOT_Y;		dGotoPos = st_motor[MOTOR_ROBOT_Y].d_pos[P_XY_REJ_START];		nPos = P_XY_REJ_START;break;
			case 11: nAxis = MOTOR_ROBOT_Y;		dGotoPos = st_motor[MOTOR_ROBOT_Y].d_pos[p_XY_REJ_END];			nPos = p_XY_REJ_END;break;
			case 12: nAxis = MOTOR_ROBOT_Y;		dGotoPos = st_motor[MOTOR_ROBOT_Y].d_pos[P_XY_COK_SITE1_START];	nPos = P_XY_COK_SITE1_START;	break;
			case 13: nAxis = MOTOR_ROBOT_Y;		dGotoPos = st_motor[MOTOR_ROBOT_Y].d_pos[P_XY_COK_SITE1_END];	nPos = P_XY_COK_SITE1_END;	break;
			case 14: nAxis = MOTOR_ROBOT_Y;		dGotoPos = st_motor[MOTOR_ROBOT_Y].d_pos[P_XY_COK_SITE2_START];	nPos = P_XY_COK_SITE2_START;	break;
			case 15: nAxis = MOTOR_ROBOT_Y;		dGotoPos = st_motor[MOTOR_ROBOT_Y].d_pos[P_XY_COK_SITE2_END];	nPos = P_XY_COK_SITE2_END;	break;
			case 16: nAxis = MOTOR_ROBOT_Y;		dGotoPos = st_motor[MOTOR_ROBOT_Y].d_pos[P_XY_COK_STACKER_START];nPos = P_XY_COK_STACKER_START;		break;
			case 17: nAxis = MOTOR_ROBOT_Y;		dGotoPos = st_motor[MOTOR_ROBOT_Y].d_pos[P_XY_COK_STACKER_END];	nPos = P_XY_COK_STACKER_END;	break;
			}
		}
		else if( lpcc->Col <= 18 )
		{
			switch( lpcc->Row )
			{
			case 1: nAxis = MOTOR_TESTSITE_1_Z;	dGotoPos = st_motor[MOTOR_TESTSITE_1_Z].d_pos[P_SITE_COK_CHANGE];nPos = P_SITE_COK_CHANGE;	break;
			case 2: nAxis = MOTOR_TESTSITE_1_Z;	dGotoPos = st_motor[MOTOR_TESTSITE_1_Z].d_pos[P_SITE_COK_1];	nPos = P_SITE_COK_1;break;
			case 3: nAxis = MOTOR_TESTSITE_1_Z;	dGotoPos = st_motor[MOTOR_TESTSITE_1_Z].d_pos[P_SITE_COK_2];	nPos = P_SITE_COK_2;break;
			case 4: nAxis = MOTOR_TESTSITE_1_Z;	dGotoPos = st_motor[MOTOR_TESTSITE_1_Z].d_pos[P_SITE_COK_3];	nPos = P_SITE_COK_3;break;
			case 5: nAxis = MOTOR_TESTSITE_1_Z;	dGotoPos = st_motor[MOTOR_TESTSITE_1_Z].d_pos[P_SITE_COK_4];	nPos = P_SITE_COK_4;break;
			case 6: nAxis = MOTOR_TESTSITE_1_Z;	dGotoPos = st_motor[MOTOR_TESTSITE_1_Z].d_pos[P_SITE_COK_5];	nPos = P_SITE_COK_5;break;
			case 7: nAxis = MOTOR_TESTSITE_1_Z;	dGotoPos = st_motor[MOTOR_TESTSITE_1_Z].d_pos[P_SITE_COK_6];	nPos = P_SITE_COK_6;break;

			case 8: nAxis = MOTOR_TESTSITE_2_Z;	dGotoPos = st_motor[MOTOR_TESTSITE_2_Z].d_pos[P_SITE_COK_CHANGE];nPos = P_SITE_COK_CHANGE;	break;
			case 9: nAxis = MOTOR_TESTSITE_2_Z;	dGotoPos = st_motor[MOTOR_TESTSITE_2_Z].d_pos[P_SITE_COK_1];	nPos = P_SITE_COK_1;break;
			case 10: nAxis = MOTOR_TESTSITE_2_Z;	dGotoPos = st_motor[MOTOR_TESTSITE_2_Z].d_pos[P_SITE_COK_2];nPos = P_SITE_COK_2;	break;
			case 11: nAxis = MOTOR_TESTSITE_2_Z;	dGotoPos = st_motor[MOTOR_TESTSITE_2_Z].d_pos[P_SITE_COK_3];nPos = P_SITE_COK_3;	break;
			case 12: nAxis = MOTOR_TESTSITE_2_Z;	dGotoPos = st_motor[MOTOR_TESTSITE_2_Z].d_pos[P_SITE_COK_4];nPos = P_SITE_COK_4;	break;
			case 13: nAxis = MOTOR_TESTSITE_2_Z;	dGotoPos = st_motor[MOTOR_TESTSITE_2_Z].d_pos[P_SITE_COK_5];nPos = P_SITE_COK_5;	break;
			case 14: nAxis = MOTOR_TESTSITE_2_Z;	dGotoPos = st_motor[MOTOR_TESTSITE_2_Z].d_pos[P_SITE_COK_6];nPos = P_SITE_COK_6;	break;

			case 17: nAxis = MOTOR_COK_ROBOT_Y;	dGotoPos = st_motor[MOTOR_COK_ROBOT_Y].d_pos[P_CY_COK_0];	nPos = P_CY_COK_0;break;
			case 18: nAxis = MOTOR_COK_ROBOT_Y;	dGotoPos = st_motor[MOTOR_COK_ROBOT_Y].d_pos[P_CY_COK_5];	nPos = P_CY_COK_5;break;
			
			case 19: nAxis = MOTOR_COK_ROBOT_Z;	dGotoPos = st_motor[MOTOR_COK_ROBOT_Z].d_pos[P_CZ_SAFETY];	nPos = P_CZ_SAFETY;break;
			case 20: nAxis = MOTOR_COK_ROBOT_Z;	dGotoPos = st_motor[MOTOR_COK_ROBOT_Z].d_pos[P_CZ_COK_0];	nPos = P_CZ_COK_0;break;
			case 21: nAxis = MOTOR_COK_ROBOT_Z;	dGotoPos = st_motor[MOTOR_COK_ROBOT_Z].d_pos[P_CZ_COK_19];	nPos = P_CZ_COK_19;break;
			}
		}
		
		

		// Go 누르면...
		if( (lpcc->Col - 1) % 3 == 1 )
		{
			// 정지.
			if( lpcc->Col == m_nGo_col && lpcc->Row == m_nGo_row )
			{
				// 정지..
				GETMOTOR( (ENUM_MOTOR)nAxis ).SetStopReq( true );
				return;
			}
			
			On_GoMotor( nAxis, dGotoPos, lpcc->Row, lpcc->Col );
		}
		// Read 누르면.
		else if( (lpcc->Col - 1) % 3 == 2 )
		{
			double dvalue = g_comiMgr.Get_MotCurrentPos(nAxis);  // FASTECH 모터 특정 축의 커맨트 위치 리턴 함수 //
			
			int nResponse = Func.On_Encoder_Check(dvalue);
			if (nResponse == CTL_YES)
			{
				st_motor[nAxis].d_pos[nPos] = dvalue;				
			}
		}
		
		m_nAxis = nAxis;
		
	}
	else if( wParam == IDC_CUSTOM_TARGET_SITE )
	{
		int iSelect = (lpcc->Col - 1) * 10 + lpcc->Row - 1;
		if( m_nRobot == -1 )
		{
			m_nTarget = 20 + iSelect;
		}
		else
		{
			m_nTarget = iSelect / 2;
		}

		OnUpdateTarget_testSite();
		OnUpdateTarget_Tray( IDC_CUSTOM_TARGET_REJECT );
		OnUpdateTarget_Tray( IDC_CUSTOM_TARGET_TRAY1 );
		OnUpdateTarget_Tray( IDC_CUSTOM_TARGET_TRAY2 );
	}
	else if( wParam == IDC_CUSTOM_TARGET_ROBOT )
	{
		if( lpcc->Col == 1 )
		{
			m_nRobot = -1;
			if( m_nTarget < 100 && m_nTarget < 20 && m_nTarget > 0)
			{
				m_nTarget *= 2;
				m_nTarget += 20;
			}
		}
		else 
		{
			m_nRobot = lpcc->Row - 1;
			if( m_nTarget < 100 && m_nTarget > 20 )
			{
				m_nTarget -= 20;
				m_nTarget /= 2;
			}

		}

		OnUpdateTarget_Robot();
		OnUpdateTarget_testSite();
	}
	else if( wParam == IDC_CUSTOM_TARGET_REJECT )
	{
		int x = st_basic.n_tray_x;
		int y = st_basic.n_tray_y;
		if( st_basic.n_degree == EDEG_90 || st_basic.n_degree == EDEG_270 )
		{
			x = st_basic.n_tray_y;
			y = st_basic.n_tray_x;
		}
		m_nTarget = MPOS_INDEX_REJ + GetMdlIdx(lpcc->Col - 1, lpcc->Row - 1, x, y, true ) - 1;

		OnUpdateTarget_testSite();
		OnUpdateTarget_Tray( IDC_CUSTOM_TARGET_REJECT );
		OnUpdateTarget_Tray( IDC_CUSTOM_TARGET_TRAY1 );
		OnUpdateTarget_Tray( IDC_CUSTOM_TARGET_TRAY2 );
	}
	else if( wParam == IDC_CUSTOM_TARGET_TRAY1 )
	{
		int x = st_basic.n_tray_x;
		int y = st_basic.n_tray_y;
		if( st_basic.n_degree == EDEG_90 || st_basic.n_degree == EDEG_270 )
		{
			x = st_basic.n_tray_y;
			y = st_basic.n_tray_x;
		}
		m_nTarget = MPOS_INDEX_BIN1 + GetMdlIdx(lpcc->Col - 1, lpcc->Row - 1, x, y, true ) - 1;

		OnUpdateTarget_testSite();
		OnUpdateTarget_Tray( IDC_CUSTOM_TARGET_REJECT );
		OnUpdateTarget_Tray( IDC_CUSTOM_TARGET_TRAY1 );
		OnUpdateTarget_Tray( IDC_CUSTOM_TARGET_TRAY2 );
	}
	else if( wParam == IDC_CUSTOM_TARGET_TRAY2 )
	{
		int x = st_basic.n_tray_x;
		int y = st_basic.n_tray_y;
		if( st_basic.n_degree == EDEG_90 || st_basic.n_degree == EDEG_270 )
		{
			x = st_basic.n_tray_y;
			y = st_basic.n_tray_x;
		}
		m_nTarget = MPOS_INDEX_BIN2 + GetMdlIdx(lpcc->Col - 1, lpcc->Row - 1, x, y, true ) - 1;

		OnUpdateTarget_testSite();
		OnUpdateTarget_Tray( IDC_CUSTOM_TARGET_REJECT );
		OnUpdateTarget_Tray( IDC_CUSTOM_TARGET_TRAY1 );
		OnUpdateTarget_Tray( IDC_CUSTOM_TARGET_TRAY2 );
	}

	else if( wParam == IDC_CUSTOM_WITH_IO_MOTOR_INFO )
	{
		if( m_nAxis < 0 )
				return;

		if( lpcc->Col == 2 && lpcc->Row == 1 )
		{
			if( g_comiMgr.Get_MotPower( m_nAxis ) == 0 )
			{
				COMI.Set_MotPower( m_nAxis, IO_ON );
			}
			else
			{
				COMI.Set_MotPower( m_nAxis, IO_OFF );
			}
		}
		else if( lpcc->Col == 2 && lpcc->Row == 2 )
		{
			if( COMI.Get_MotAlarmStatus(m_nAxis) != 0 )
			{
				COMI.Set_MotAlarmClear(m_nAxis );
			}
		}
	}
}

void CScreen_Motor_With_IO::OnTimer(UINT nIDEvent) 
{
	// TODO: Add your message handler code here and/or call default
	switch(nIDEvent)
	{
	case TMR_WITH_IO_READ:
		OnUpdateIO();
		OnUpdateMotorInfo();
		break;

	}
	CFormView::OnTimer(nIDEvent);
}

void CScreen_Motor_With_IO::OnUpdateIO()
{
	int iGrid = IDC_CUSTOM_IO;


	// BIN
	if( (g_ioMgr.get_out_bit( st_io.o_bin_stacker_rail_variable_fwd, IO_ON ) == IO_ON ) && (g_ioMgr.get_out_bit( st_io.o_bin_stacker_rail_variable_bwd,IO_OFF ) == IO_OFF ) )
		GridColor( iGrid, 1, 1, RGB(255,128,64), WHITE_C );		else	GridColor( iGrid, 1, 1, RGB(128,64,0), BLACK_C ); 
	if( g_ioMgr.get_in_bit( st_io.i_bin_stacker_rail_variable_fwd_chk ) == IO_ON )
		GridColor( iGrid, 1, 6, RGB(0,128,0), WHITE_C);		else	GridColor( iGrid, 1, 6, RGB(128,255,128), BLACK_C ); 
	if( g_ioMgr.get_in_bit( st_io.i_bin_stacker_rail_variable_bwd_chk ) == IO_ON )
		GridColor( iGrid, 2, 6, RGB(0,128,0), WHITE_C);		else	GridColor( iGrid, 2, 6, RGB(128,255,128), BLACK_C ); 

	//guide
	if( g_ioMgr.get_out_bit( st_io.o_bin_stacker1_rail_guide_fwdbwd, IO_ON) == IO_ON )
		GridColor( iGrid, 3, 1, RGB(255,128,64), WHITE_C );		else	GridColor( iGrid, 3, 1, RGB(128,64,0), BLACK_C ); 
	if( g_ioMgr.get_in_bit( st_io.i_bin_stacker1_rail_guide_fwd_chk ) == IO_ON )
		GridColor( iGrid, 3, 2, RGB(0,128,0), WHITE_C);		else	GridColor( iGrid, 3, 2, RGB(128,255,128), BLACK_C ); 
	if( g_ioMgr.get_in_bit( st_io.i_bin_stacker1_rail_guide_bwd_chk ) == IO_ON )
		GridColor( iGrid, 4, 2, RGB(0,128,0), WHITE_C);		else	GridColor( iGrid, 4, 2, RGB(128,255,128), BLACK_C );

	if( g_ioMgr.get_out_bit( st_io.o_bin_stacker2_rail_guide_fwdbwd, IO_ON) == IO_ON )
		GridColor( iGrid, 3, 3, RGB(255,128,64), WHITE_C );		else	GridColor( iGrid, 3, 3, RGB(128,64,0), BLACK_C ); 
	if( g_ioMgr.get_in_bit( st_io.i_bin_stacker2_rail_guide_fwd_chk ) == IO_ON )
		GridColor( iGrid, 3, 4, RGB(0,128,0), WHITE_C);		else	GridColor( iGrid, 3, 4, RGB(128,255,128), BLACK_C ); 
	if( g_ioMgr.get_in_bit( st_io.i_bin_stacker2_rail_guide_bwd_chk ) == IO_ON )
		GridColor( iGrid, 4, 4, RGB(0,128,0), WHITE_C);		else	GridColor( iGrid, 4, 4, RGB(128,255,128), BLACK_C );

	if( g_ioMgr.get_out_bit( st_io.o_bin_stacker3_rail_guide_fwdbwd, IO_ON) == IO_ON )
		GridColor( iGrid, 3, 5, RGB(255,128,64), WHITE_C );		else	GridColor( iGrid, 3, 5, RGB(128,64,0), BLACK_C ); 
	if( g_ioMgr.get_in_bit( st_io.i_bin_stacker3_rail_guide_fwd_chk ) == IO_ON )
		GridColor( iGrid, 3, 6, RGB(0,128,0), WHITE_C);		else	GridColor( iGrid, 3, 6, RGB(128,255,128), BLACK_C ); 
	if( g_ioMgr.get_in_bit( st_io.i_bin_stacker3_rail_guide_bwd_chk ) == IO_ON )
		GridColor( iGrid, 4, 6, RGB(0,128,0), WHITE_C);		else	GridColor( iGrid, 4, 6, RGB(128,255,128), BLACK_C );

	// pusher
	if( g_ioMgr.get_out_bit( st_io.o_bin_stacker1_rail_pusher_fwdbwd, IO_ON) == IO_ON )
		GridColor( iGrid, 5, 1, RGB(255,128,64), WHITE_C );		else	GridColor( iGrid, 5, 1, RGB(128,64,0), BLACK_C ); 
	if( g_ioMgr.get_in_bit( st_io.i_bin_stacker1_rail_pusher_fwd_chk ) == IO_ON )
		GridColor( iGrid, 5, 2, RGB(0,128,0), WHITE_C);		else	GridColor( iGrid, 5, 2, RGB(128,255,128), BLACK_C ); 
	if( g_ioMgr.get_in_bit( st_io.i_bin_stacker1_rail_pusher_bwd_chk ) == IO_ON )
		GridColor( iGrid, 6, 2, RGB(0,128,0), WHITE_C);		else	GridColor( iGrid, 6, 2, RGB(128,255,128), BLACK_C );

	if( g_ioMgr.get_out_bit( st_io.o_bin_stacker2_rail_pusher_fwdbwd, IO_ON) == IO_ON )
		GridColor( iGrid, 5, 3, RGB(255,128,64), WHITE_C );		else	GridColor( iGrid, 5, 3, RGB(128,64,0), BLACK_C ); 
	if( g_ioMgr.get_in_bit( st_io.i_bin_stacker2_rail_pusher_fwd_chk ) == IO_ON )
		GridColor( iGrid, 5, 4, RGB(0,128,0), WHITE_C);		else	GridColor( iGrid, 5, 4, RGB(128,255,128), BLACK_C ); 
	if( g_ioMgr.get_in_bit( st_io.i_bin_stacker2_rail_pusher_bwd_chk ) == IO_ON )
		GridColor( iGrid, 6, 4, RGB(0,128,0), WHITE_C);		else	GridColor( iGrid, 6, 4, RGB(128,255,128), BLACK_C );

	// Align
	if( g_ioMgr.get_out_bit( st_io.o_bin_tray1_align_fwdbwd, IO_ON) == IO_ON )
		GridColor( iGrid, 7, 1, RGB(255,128,64), WHITE_C );		else	GridColor( iGrid, 7, 1, RGB(128,64,0), BLACK_C ); 
	if( g_ioMgr.get_in_bit( st_io.i_bin_tray1_align_fwd_chk ) == IO_ON )
		GridColor( iGrid, 7, 2, RGB(0,128,0), WHITE_C);		else	GridColor( iGrid, 7, 2, RGB(128,255,128), BLACK_C ); 
	if( g_ioMgr.get_in_bit( st_io.i_bin_tray1_align_bwd_chk ) == IO_ON )
		GridColor( iGrid, 8, 2, RGB(0,128,0), WHITE_C);		else	GridColor( iGrid, 8, 2, RGB(128,255,128), BLACK_C );

	if( g_ioMgr.get_out_bit( st_io.o_bin_tray2_align_fwdbwd, IO_ON) == IO_ON )
		GridColor( iGrid, 7, 3, RGB(255,128,64), WHITE_C );		else	GridColor( iGrid, 7, 3, RGB(128,64,0), BLACK_C ); 
	if( g_ioMgr.get_in_bit( st_io.i_bin_tray2_align_fwd_chk ) == IO_ON )
		GridColor( iGrid, 7, 4, RGB(0,128,0), WHITE_C);		else	GridColor( iGrid, 7, 4, RGB(128,255,128), BLACK_C ); 
	if( g_ioMgr.get_in_bit( st_io.i_bin_tray2_align_bwd_chk ) == IO_ON )
		GridColor( iGrid, 8, 4, RGB(0,128,0), WHITE_C);		else	GridColor( iGrid, 8, 4, RGB(128,255,128), BLACK_C );

	if( g_ioMgr.get_out_bit( st_io.o_bin_tray3_align_fwdbwd, IO_ON) == IO_ON )
		GridColor( iGrid, 7, 5, RGB(255,128,64), WHITE_C );		else	GridColor( iGrid, 7, 5, RGB(128,64,0), BLACK_C ); 
	if( g_ioMgr.get_in_bit( st_io.i_bin_tray3_align_fwd_chk ) == IO_ON )
		GridColor( iGrid, 7, 6, RGB(0,128,0), WHITE_C);		else	GridColor( iGrid, 7, 6, RGB(128,255,128), BLACK_C ); 
	if( g_ioMgr.get_in_bit( st_io.i_bin_tray3_align_bwd_chk ) == IO_ON )
		GridColor( iGrid, 8, 6, RGB(0,128,0), WHITE_C);		else	GridColor( iGrid, 8, 6, RGB(128,255,128), BLACK_C );

	// stopper
	if( g_ioMgr.get_out_bit( st_io.o_bin_stopper1_updn, IO_ON) == IO_ON )
		GridColor( iGrid, 9, 1, RGB(255,128,64), WHITE_C );		else	GridColor( iGrid, 9, 1, RGB(128,64,0), BLACK_C ); 
	if( g_ioMgr.get_in_bit( st_io.i_bin_stopper1_up_chk ) == IO_ON )
		GridColor( iGrid, 9, 2, RGB(0,128,0), WHITE_C);		else	GridColor( iGrid, 9, 2, RGB(128,255,128), BLACK_C ); 
	if( g_ioMgr.get_in_bit( st_io.i_bin_stopper1_dn_chk ) == IO_ON )
		GridColor( iGrid, 10, 2, RGB(0,128,0), WHITE_C);		else	GridColor( iGrid, 10, 2, RGB(128,255,128), BLACK_C );

	if( g_ioMgr.get_out_bit( st_io.o_bin_stopper2_updn, IO_ON) == IO_ON )
		GridColor( iGrid, 9, 3, RGB(255,128,64), WHITE_C );		else	GridColor( iGrid, 9, 3, RGB(128,64,0), BLACK_C ); 
	if( g_ioMgr.get_in_bit( st_io.i_bin_stopper2_up_chk ) == IO_ON )
		GridColor( iGrid, 9, 4, RGB(0,128,0), WHITE_C);		else	GridColor( iGrid, 9, 4, RGB(128,255,128), BLACK_C ); 
	if( g_ioMgr.get_in_bit( st_io.i_bin_stopper2_dn_chk ) == IO_ON )
		GridColor( iGrid, 10, 4, RGB(0,128,0), WHITE_C);		else	GridColor( iGrid, 10, 4, RGB(128,255,128), BLACK_C );

	if( g_ioMgr.get_out_bit( st_io.o_bin_stopper3_updn, IO_ON) == IO_ON )
		GridColor( iGrid, 9, 5, RGB(255,128,64), WHITE_C );		else	GridColor( iGrid, 9, 5, RGB(128,64,0), BLACK_C ); 
	if( g_ioMgr.get_in_bit( st_io.i_bin_stopper3_up_chk ) == IO_ON )
		GridColor( iGrid, 9, 6, RGB(0,128,0), WHITE_C);		else	GridColor( iGrid, 9, 6, RGB(128,255,128), BLACK_C ); 
	if( g_ioMgr.get_in_bit( st_io.i_bin_stopper3_dn_chk ) == IO_ON )
		GridColor( iGrid, 10, 6, RGB(0,128,0), WHITE_C);		else	GridColor( iGrid, 10, 6, RGB(128,255,128), BLACK_C );

	// Clamp
	if( g_ioMgr.get_out_bit( st_io.o_bin_elevator1_tray_clamp, IO_ON) == IO_ON )
		GridColor( iGrid, 11, 1, RGB(255,128,64), WHITE_C );		else	GridColor( iGrid, 11, 1, RGB(128,64,0), BLACK_C ); 
	if( g_ioMgr.get_in_bit( st_io.i_bin_elevator1_tray_clamp_chk ) == IO_ON )
		GridColor( iGrid, 11, 2, RGB(0,128,0), WHITE_C);		else	GridColor( iGrid, 11, 2, RGB(128,255,128), BLACK_C ); 

	if( g_ioMgr.get_out_bit( st_io.o_bin_elevator2_tray_clamp, IO_ON) == IO_ON )
		GridColor( iGrid, 11, 3, RGB(255,128,64), WHITE_C );		else	GridColor( iGrid, 11, 3, RGB(128,64,0), BLACK_C ); 
	if( g_ioMgr.get_in_bit( st_io.i_bin_elevator2_tray_clamp_chk ) == IO_ON )
		GridColor( iGrid, 11, 4, RGB(0,128,0), WHITE_C);		else	GridColor( iGrid, 11, 4, RGB(128,255,128), BLACK_C ); 

	if( g_ioMgr.get_out_bit( st_io.o_bin_elevator3_tray_clamp, IO_ON) == IO_ON )
		GridColor( iGrid, 11, 5, RGB(255,128,64), WHITE_C );		else	GridColor( iGrid, 11, 5, RGB(128,64,0), BLACK_C ); 
	if( g_ioMgr.get_in_bit( st_io.i_bin_elevator3_tray_clamp_chk ) == IO_ON )
		GridColor( iGrid, 11, 6, RGB(0,128,0), WHITE_C);		else	GridColor( iGrid, 11, 6, RGB(128,255,128), BLACK_C ); 

	// 트레이 체크
	if( g_ioMgr.get_in_bit( st_io.i_bin_stacker1_tray_chk ) == IO_ON )
		GridColor( iGrid, 13, 1, RGB(0,128,0), WHITE_C);		else	GridColor( iGrid, 13, 1, RGB(128,255,128), BLACK_C ); 
	if( g_ioMgr.get_in_bit( st_io.i_bin_stacker2_tray_chk ) == IO_ON )
		GridColor( iGrid, 13, 3, RGB(0,128,0), WHITE_C);		else	GridColor( iGrid, 13, 3, RGB(128,255,128), BLACK_C ); 
	if( g_ioMgr.get_in_bit( st_io.i_bin_stacker3_tray_chk ) == IO_ON )
		GridColor( iGrid, 13, 5, RGB(0,128,0), WHITE_C);		else	GridColor( iGrid, 13, 5, RGB(128,255,128), BLACK_C ); 

	// 스톱 포지션
	if( g_ioMgr.get_in_bit( st_io.i_bin_tray1_stop_position_chk ) == IO_ON )
		GridColor( iGrid, 14, 1, RGB(0,128,0), WHITE_C);		else	GridColor( iGrid, 14, 1, RGB(128,255,128), BLACK_C ); 
	if( g_ioMgr.get_in_bit( st_io.i_bin_tray2_stop_position_chk ) == IO_ON )
		GridColor( iGrid, 14, 3, RGB(0,128,0), WHITE_C);		else	GridColor( iGrid, 14, 3, RGB(128,255,128), BLACK_C ); 
	if( g_ioMgr.get_in_bit( st_io.i_bin_tray3_stop_position_chk ) == IO_ON )
		GridColor( iGrid, 14, 5, RGB(0,128,0), WHITE_C);		else	GridColor( iGrid, 14, 5, RGB(128,255,128), BLACK_C );

	// 트레이 인체크
	if( g_ioMgr.get_in_bit( st_io.i_bin_tray1_in_chk ) == IO_ON )
		GridColor( iGrid, 15, 1, RGB(0,128,0), WHITE_C);		else	GridColor( iGrid, 15, 1, RGB(128,255,128), BLACK_C ); 

	// 트레이 방향 체크
	if( g_ioMgr.get_in_bit( st_io.i_bin_tray1_direction_chk ) == IO_ON )
		GridColor( iGrid, 16, 1, RGB(0,128,0), WHITE_C);		else	GridColor( iGrid, 16, 1, RGB(128,255,128), BLACK_C );

	// Robot 그립퍼 다운
	if( g_ioMgr.get_out_bit( st_io.o_gripper_updn, IO_ON) == IO_ON )
		GridColor( iGrid, 1, 7, RGB(255,128,64), WHITE_C );		else	GridColor( iGrid, 1, 7, RGB(128,64,0), BLACK_C ); 
	if( g_ioMgr.get_in_bit( st_io.i_gripper_up_chk ) == IO_ON )
		GridColor( iGrid, 1, 8, RGB(0,128,0), WHITE_C);		else	GridColor( iGrid, 1, 8, RGB(128,255,128), BLACK_C ); 
	if( g_ioMgr.get_in_bit( st_io.i_gripper_dn_chk ) == IO_ON )
		GridColor( iGrid, 2, 8, RGB(0,128,0), WHITE_C);		else	GridColor( iGrid, 2, 8, RGB(128,255,128), BLACK_C );

	// 그립퍼 잡기
	if( g_ioMgr.get_out_bit( st_io.o_gripper, IO_ON) == IO_ON )
		GridColor( iGrid, 3, 7, RGB(255,128,64), WHITE_C );		else	GridColor( iGrid, 3, 7, RGB(128,64,0), BLACK_C ); 
	if( g_ioMgr.get_in_bit( st_io.i_gripper_on_chk ) == IO_ON )
		GridColor( iGrid, 3, 8, RGB(0,128,0), WHITE_C);		else	GridColor( iGrid, 3, 8, RGB(128,255,128), BLACK_C ); 
	if( g_ioMgr.get_in_bit( st_io.i_gripper_off_chk ) == IO_ON )
		GridColor( iGrid, 4, 8, RGB(0,128,0), WHITE_C);		else	GridColor( iGrid, 4, 8, RGB(128,255,128), BLACK_C );

	// 픽커 4 다운
	if( g_ioMgr.get_out_bit( st_io.o_picker4_updn, IO_ON) == IO_ON )
		GridColor( iGrid, 5, 7, RGB(255,128,64), WHITE_C );		else	GridColor( iGrid, 5, 7, RGB(128,64,0), BLACK_C ); 
	if( g_ioMgr.get_in_bit( st_io.i_picker4_up_chk ) == IO_ON )
		GridColor( iGrid, 5, 8, RGB(0,128,0), WHITE_C);		else	GridColor( iGrid, 5, 8, RGB(128,255,128), BLACK_C ); 
	if( g_ioMgr.get_in_bit( st_io.i_picker4_dn_chk ) == IO_ON )
		GridColor( iGrid, 6, 8, RGB(0,128,0), WHITE_C);		else	GridColor( iGrid, 6, 8, RGB(128,255,128), BLACK_C );

	if( g_ioMgr.get_out_bit( st_io.o_picker3_updn, IO_ON) == IO_ON )
		GridColor( iGrid, 7, 7, RGB(255,128,64), WHITE_C );		else	GridColor( iGrid, 7, 7, RGB(128,64,0), BLACK_C ); 
	if( g_ioMgr.get_in_bit( st_io.i_picker3_up_chk ) == IO_ON )
		GridColor( iGrid, 7, 8, RGB(0,128,0), WHITE_C);		else	GridColor( iGrid, 7, 8, RGB(128,255,128), BLACK_C ); 
	if( g_ioMgr.get_in_bit( st_io.i_picker3_dn_chk ) == IO_ON )
		GridColor( iGrid, 8, 8, RGB(0,128,0), WHITE_C);		else	GridColor( iGrid, 8, 8, RGB(128,255,128), BLACK_C );

	if( g_ioMgr.get_out_bit( st_io.o_picker2_updn, IO_ON) == IO_ON )
		GridColor( iGrid, 9, 7, RGB(255,128,64), WHITE_C );		else	GridColor( iGrid, 9, 7, RGB(128,64,0), BLACK_C ); 
	if( g_ioMgr.get_in_bit( st_io.i_picker2_up_chk ) == IO_ON )
		GridColor( iGrid, 9, 8, RGB(0,128,0), WHITE_C);		else	GridColor( iGrid, 9, 8, RGB(128,255,128), BLACK_C ); 
	if( g_ioMgr.get_in_bit( st_io.i_picker2_dn_chk ) == IO_ON )
		GridColor( iGrid, 10, 8, RGB(0,128,0), WHITE_C);		else	GridColor( iGrid, 10, 8, RGB(128,255,128), BLACK_C );

	if( g_ioMgr.get_out_bit( st_io.o_picker1_updn, IO_ON) == IO_ON )
		GridColor( iGrid, 11, 7, RGB(255,128,64), WHITE_C );		else	GridColor( iGrid, 11, 7, RGB(128,64,0), BLACK_C ); 
	if( g_ioMgr.get_in_bit( st_io.i_picker1_up_chk ) == IO_ON )
		GridColor( iGrid, 11, 8, RGB(0,128,0), WHITE_C);		else	GridColor( iGrid, 11, 8, RGB(128,255,128), BLACK_C ); 
	if( g_ioMgr.get_in_bit( st_io.i_picker1_dn_chk ) == IO_ON )
		GridColor( iGrid, 12, 8, RGB(0,128,0), WHITE_C);		else	GridColor( iGrid, 12, 8, RGB(128,255,128), BLACK_C );

	// 빨기
	if( g_ioMgr.get_out_bit( st_io.o_picker4_vacuum, IO_ON) == IO_ON )
		GridColor( iGrid, 13, 7, RGB(255,128,64), WHITE_C );		else	GridColor( iGrid, 13, 7, RGB(128,64,0), BLACK_C ); 
	if( g_ioMgr.get_in_bit( st_io.i_picker4_vacuum_chk ) == IO_ON )
		GridColor( iGrid, 13, 8, RGB(0,128,0), WHITE_C);		else	GridColor( iGrid, 13, 8, RGB(128,255,128), BLACK_C );

	if( g_ioMgr.get_out_bit( st_io.o_picker3_vacuum, IO_ON) == IO_ON )
		GridColor( iGrid, 14, 7, RGB(255,128,64), WHITE_C );		else	GridColor( iGrid, 14, 7, RGB(128,64,0), BLACK_C ); 
	if( g_ioMgr.get_in_bit( st_io.i_picker3_vacuum_chk ) == IO_ON )
		GridColor( iGrid, 14, 8, RGB(0,128,0), WHITE_C);		else	GridColor( iGrid, 14, 8, RGB(128,255,128), BLACK_C );

	if( g_ioMgr.get_out_bit( st_io.o_picker2_vacuum, IO_ON) == IO_ON )
		GridColor( iGrid, 15, 7, RGB(255,128,64), WHITE_C );		else	GridColor( iGrid, 15, 7, RGB(128,64,0), BLACK_C ); 
	if( g_ioMgr.get_in_bit( st_io.i_picker2_vacuum_chk ) == IO_ON )
		GridColor( iGrid, 15, 8, RGB(0,128,0), WHITE_C);		else	GridColor( iGrid, 15, 8, RGB(128,255,128), BLACK_C );

	if( g_ioMgr.get_out_bit( st_io.o_picker1_vacuum, IO_ON) == IO_ON )
		GridColor( iGrid, 16, 7, RGB(255,128,64), WHITE_C );		else	GridColor( iGrid, 16, 7, RGB(128,64,0), BLACK_C ); 
	if( g_ioMgr.get_in_bit( st_io.i_picker1_vacuum_chk ) == IO_ON )
		GridColor( iGrid, 16, 8, RGB(0,128,0), WHITE_C);		else	GridColor( iGrid, 16, 8, RGB(128,255,128), BLACK_C );

	//내뱉기
	if( g_ioMgr.get_out_bit( st_io.o_picker4_eject, IO_ON) == IO_ON )
		GridColor( iGrid, 17, 7, RGB(255,128,64), WHITE_C );		else	GridColor( iGrid, 17, 7, RGB(128,64,0), BLACK_C ); 

	if( g_ioMgr.get_out_bit( st_io.o_picker3_eject, IO_ON) == IO_ON )
		GridColor( iGrid, 18, 7, RGB(255,128,64), WHITE_C );		else	GridColor( iGrid, 18, 7, RGB(128,64,0), BLACK_C );

	if( g_ioMgr.get_out_bit( st_io.o_picker2_eject, IO_ON) == IO_ON )
		GridColor( iGrid, 19, 7, RGB(255,128,64), WHITE_C );		else	GridColor( iGrid, 19, 7, RGB(128,64,0), BLACK_C );

	if( g_ioMgr.get_out_bit( st_io.o_picker1_eject, IO_ON) == IO_ON )
		GridColor( iGrid, 20, 7, RGB(255,128,64), WHITE_C );		else	GridColor( iGrid, 20, 7, RGB(128,64,0), BLACK_C );

	// 사이트 1 플레이트
	if( (g_ioMgr.get_out_bit( st_io.o_testsite1_cok_plate_fwd, IO_ON ) == IO_ON ) && (g_ioMgr.get_out_bit( st_io.o_testsite1_cok_plate_bwd,IO_OFF ) == IO_OFF ) )
		GridColor( iGrid, 1, 9, RGB(255,128,64), WHITE_C );		else	GridColor( iGrid, 1, 9, RGB(128,64,0), BLACK_C ); 
	if( g_ioMgr.get_in_bit( st_io.i_testsite1_cok_plate_fwd_chk ) == IO_ON )
		GridColor( iGrid, 1, 10, RGB(0,128,0), WHITE_C);		else	GridColor( iGrid, 1, 10, RGB(128,255,128), BLACK_C );
	if( g_ioMgr.get_in_bit( st_io.i_testsite1_cok_plate_bwd_chk ) == IO_ON )
		GridColor( iGrid, 2, 10, RGB(0,128,0), WHITE_C);		else	GridColor( iGrid, 2, 10, RGB(128,255,128), BLACK_C );

	// 사이트 1 COK LOCK
	if( g_ioMgr.get_out_bit( st_io.o_testsite1_cok_lockunlock, IO_ON) == IO_ON )
		GridColor( iGrid, 3, 9, RGB(255,128,64), WHITE_C );		else	GridColor( iGrid, 3, 9, RGB(128,64,0), BLACK_C );
	if( g_ioMgr.get_in_bit( st_io.i_testsite1_cok_lock_chk ) == IO_ON )
		GridColor( iGrid, 3, 10, RGB(0,128,0), WHITE_C);		else	GridColor( iGrid, 3, 10, RGB(128,255,128), BLACK_C );
	if( g_ioMgr.get_in_bit( st_io.i_testsite1_cok_unlock_chk ) == IO_ON )
		GridColor( iGrid, 4, 10, RGB(0,128,0), WHITE_C);		else	GridColor( iGrid, 4, 10, RGB(128,255,128), BLACK_C );

	// Insert
	if( g_ioMgr.get_out_bit( st_io.o_testsite1_cok_insert5_fwdbwd, IO_ON) == IO_ON )
		GridColor( iGrid, 5, 9, RGB(255,128,64), WHITE_C );		else	GridColor( iGrid, 5, 9, RGB(128,64,0), BLACK_C );
	if( g_ioMgr.get_in_bit( st_io.i_testsite1_cok_insert5_fwd_chk ) == IO_ON )
		GridColor( iGrid, 5, 10, RGB(0,128,0), WHITE_C);		else	GridColor( iGrid, 5, 10, RGB(128,255,128), BLACK_C );
	if( g_ioMgr.get_in_bit( st_io.i_testsite1_cok_insert5_bwd_chk ) == IO_ON )
		GridColor( iGrid, 6, 10, RGB(0,128,0), WHITE_C);		else	GridColor( iGrid, 6, 10, RGB(128,255,128), BLACK_C );

	if( g_ioMgr.get_out_bit( st_io.o_testsite1_cok_insert4_fwdbwd, IO_ON) == IO_ON )
		GridColor( iGrid, 7, 9, RGB(255,128,64), WHITE_C );		else	GridColor( iGrid, 7, 9, RGB(128,64,0), BLACK_C );
	if( g_ioMgr.get_in_bit( st_io.i_testsite1_cok_insert4_fwd_chk ) == IO_ON )
		GridColor( iGrid, 7, 10, RGB(0,128,0), WHITE_C);		else	GridColor( iGrid, 7, 10, RGB(128,255,128), BLACK_C );
	if( g_ioMgr.get_in_bit( st_io.i_testsite1_cok_insert4_bwd_chk ) == IO_ON )
		GridColor( iGrid, 8, 10, RGB(0,128,0), WHITE_C);		else	GridColor( iGrid, 8, 10, RGB(128,255,128), BLACK_C );

	if( g_ioMgr.get_out_bit( st_io.o_testsite1_cok_insert3_fwdbwd, IO_ON) == IO_ON )
		GridColor( iGrid, 9, 9, RGB(255,128,64), WHITE_C );		else	GridColor( iGrid, 9, 9, RGB(128,64,0), BLACK_C );
	if( g_ioMgr.get_in_bit( st_io.i_testsite1_cok_insert3_fwd_chk ) == IO_ON )
		GridColor( iGrid, 9, 10, RGB(0,128,0), WHITE_C);		else	GridColor( iGrid, 9, 10, RGB(128,255,128), BLACK_C );
	if( g_ioMgr.get_in_bit( st_io.i_testsite1_cok_insert3_bwd_chk ) == IO_ON )
		GridColor( iGrid, 10, 10, RGB(0,128,0), WHITE_C);		else	GridColor( iGrid, 10, 10, RGB(128,255,128), BLACK_C );

	if( g_ioMgr.get_out_bit( st_io.o_testsite1_cok_insert2_fwdbwd, IO_ON) == IO_ON )
		GridColor( iGrid, 11, 9, RGB(255,128,64), WHITE_C );		else	GridColor( iGrid, 11, 9, RGB(128,64,0), BLACK_C );
	if( g_ioMgr.get_in_bit( st_io.i_testsite1_cok_insert2_fwd_chk ) == IO_ON )
		GridColor( iGrid, 11, 10, RGB(0,128,0), WHITE_C);		else	GridColor( iGrid, 11, 10, RGB(128,255,128), BLACK_C );
	if( g_ioMgr.get_in_bit( st_io.i_testsite1_cok_insert2_bwd_chk ) == IO_ON )
		GridColor( iGrid, 12, 10, RGB(0,128,0), WHITE_C);		else	GridColor( iGrid, 12, 10, RGB(128,255,128), BLACK_C );

	if( g_ioMgr.get_out_bit( st_io.o_testsite1_cok_insert1_fwdbwd, IO_ON) == IO_ON )
		GridColor( iGrid, 13, 9, RGB(255,128,64), WHITE_C );		else	GridColor( iGrid, 13, 9, RGB(128,64,0), BLACK_C );
	if( g_ioMgr.get_in_bit( st_io.i_testsite1_cok_insert1_fwd_chk ) == IO_ON )
		GridColor( iGrid, 13, 10, RGB(0,128,0), WHITE_C);		else	GridColor( iGrid, 13, 10, RGB(128,255,128), BLACK_C );
	if( g_ioMgr.get_in_bit( st_io.i_testsite1_cok_insert1_bwd_chk ) == IO_ON )
		GridColor( iGrid, 14, 10, RGB(0,128,0), WHITE_C);		else	GridColor( iGrid, 14, 10, RGB(128,255,128), BLACK_C );

	// hifix
	if( g_ioMgr.get_out_bit( st_io.o_testsite1_hifix_clamp, IO_ON) == IO_ON )
		GridColor( iGrid, 15, 9, RGB(255,128,64), WHITE_C );		else	GridColor( iGrid, 15, 9, RGB(128,64,0), BLACK_C );
	if( g_ioMgr.get_in_bit( st_io.i_testsite1_hifix_clamp_chk ) == IO_ON )
		GridColor( iGrid, 15, 10, RGB(0,128,0), WHITE_C);		else	GridColor( iGrid, 15, 10, RGB(128,255,128), BLACK_C );

	if( g_ioMgr.get_in_bit( st_io.i_testsite1_hifix_chk) == IO_ON )
		GridColor( iGrid, 16, 9, RGB(0,128,0), WHITE_C);		else	GridColor( iGrid, 16, 9, RGB(128,255,128), BLACK_C );
	
	// 사이트 1 플레이트
	if( (g_ioMgr.get_out_bit( st_io.o_testsite2_cok_plate_fwd, IO_ON ) == IO_ON ) && (g_ioMgr.get_out_bit( st_io.o_testsite1_cok_plate_bwd,IO_OFF ) == IO_OFF ) )
		GridColor( iGrid, 1, 11, RGB(255,128,64), WHITE_C );		else	GridColor( iGrid, 1, 11, RGB(128,64,0), BLACK_C ); 
	if( g_ioMgr.get_in_bit( st_io.i_testsite2_cok_plate_fwd_chk ) == IO_ON )
		GridColor( iGrid, 1, 12, RGB(0,128,0), WHITE_C);		else	GridColor( iGrid, 1, 12, RGB(128,255,128), BLACK_C );
	if( g_ioMgr.get_in_bit( st_io.i_testsite2_cok_plate_bwd_chk ) == IO_ON )
		GridColor( iGrid, 2, 12, RGB(0,128,0), WHITE_C);		else	GridColor( iGrid, 2, 12, RGB(128,255,128), BLACK_C );

	// 사이트 2 COK LOCK
	if( g_ioMgr.get_out_bit( st_io.o_testsite2_cok_lockunlock, IO_ON) == IO_ON )
		GridColor( iGrid, 3, 11, RGB(255,128,64), WHITE_C );		else	GridColor( iGrid, 3, 11, RGB(128,64,0), BLACK_C );
	if( g_ioMgr.get_in_bit( st_io.i_testsite2_cok_lock_chk ) == IO_ON )
		GridColor( iGrid, 3, 12, RGB(0,128,0), WHITE_C);		else	GridColor( iGrid, 3, 12, RGB(128,255,128), BLACK_C );
	if( g_ioMgr.get_in_bit( st_io.i_testsite2_cok_unlock_chk ) == IO_ON )
		GridColor( iGrid, 4, 12, RGB(0,128,0), WHITE_C);		else	GridColor( iGrid, 4, 12, RGB(128,255,128), BLACK_C );

	// Insert
	if( g_ioMgr.get_out_bit( st_io.o_testsite2_cok_insert5_fwdbwd, IO_ON) == IO_ON )
		GridColor( iGrid, 5, 11, RGB(255,128,64), WHITE_C );		else	GridColor( iGrid, 5, 11, RGB(128,64,0), BLACK_C );
	if( g_ioMgr.get_in_bit( st_io.i_testsite2_cok_insert5_fwd_chk ) == IO_ON )
		GridColor( iGrid, 5, 12, RGB(0,128,0), WHITE_C);		else	GridColor( iGrid, 5, 12, RGB(128,255,128), BLACK_C );
	if( g_ioMgr.get_in_bit( st_io.i_testsite2_cok_insert5_bwd_chk ) == IO_ON )
		GridColor( iGrid, 6, 12, RGB(0,128,0), WHITE_C);		else	GridColor( iGrid, 6, 12, RGB(128,255,128), BLACK_C );

	if( g_ioMgr.get_out_bit( st_io.o_testsite2_cok_insert4_fwdbwd, IO_ON) == IO_ON )
		GridColor( iGrid, 7, 11, RGB(255,128,64), WHITE_C );		else	GridColor( iGrid, 7, 11, RGB(128,64,0), BLACK_C );
	if( g_ioMgr.get_in_bit( st_io.i_testsite2_cok_insert4_fwd_chk ) == IO_ON )
		GridColor( iGrid, 7, 12, RGB(0,128,0), WHITE_C);		else	GridColor( iGrid, 7, 12, RGB(128,255,128), BLACK_C );
	if( g_ioMgr.get_in_bit( st_io.i_testsite2_cok_insert4_bwd_chk ) == IO_ON )
		GridColor( iGrid, 8, 12, RGB(0,128,0), WHITE_C);		else	GridColor( iGrid, 8, 12, RGB(128,255,128), BLACK_C );

	if( g_ioMgr.get_out_bit( st_io.o_testsite2_cok_insert3_fwdbwd, IO_ON) == IO_ON )
		GridColor( iGrid, 9, 11, RGB(255,128,64), WHITE_C );		else	GridColor( iGrid, 9, 11, RGB(128,64,0), BLACK_C );
	if( g_ioMgr.get_in_bit( st_io.i_testsite2_cok_insert3_fwd_chk ) == IO_ON )
		GridColor( iGrid, 9, 12, RGB(0,128,0), WHITE_C);		else	GridColor( iGrid, 9, 12, RGB(128,255,128), BLACK_C );
	if( g_ioMgr.get_in_bit( st_io.i_testsite2_cok_insert3_bwd_chk ) == IO_ON )
		GridColor( iGrid, 10, 12, RGB(0,128,0), WHITE_C);		else	GridColor( iGrid, 10, 12, RGB(128,255,128), BLACK_C );

	if( g_ioMgr.get_out_bit( st_io.o_testsite2_cok_insert2_fwdbwd, IO_ON) == IO_ON )
		GridColor( iGrid, 11, 11, RGB(255,128,64), WHITE_C );		else	GridColor( iGrid, 11, 11, RGB(128,64,0), BLACK_C );
	if( g_ioMgr.get_in_bit( st_io.i_testsite2_cok_insert2_fwd_chk ) == IO_ON )
		GridColor( iGrid, 11, 12, RGB(0,128,0), WHITE_C);		else	GridColor( iGrid, 11, 12, RGB(128,255,128), BLACK_C );
	if( g_ioMgr.get_in_bit( st_io.i_testsite2_cok_insert2_bwd_chk ) == IO_ON )
		GridColor( iGrid, 12, 12, RGB(0,128,0), WHITE_C);		else	GridColor( iGrid, 12, 12, RGB(128,255,128), BLACK_C );

	if( g_ioMgr.get_out_bit( st_io.o_testsite2_cok_insert1_fwdbwd, IO_ON) == IO_ON )
		GridColor( iGrid, 13, 11, RGB(255,128,64), WHITE_C );		else	GridColor( iGrid, 13, 11, RGB(128,64,0), BLACK_C );
	if( g_ioMgr.get_in_bit( st_io.i_testsite2_cok_insert1_fwd_chk ) == IO_ON )
		GridColor( iGrid, 13, 12, RGB(0,128,0), WHITE_C);		else	GridColor( iGrid, 13, 12, RGB(128,255,128), BLACK_C );
	if( g_ioMgr.get_in_bit( st_io.i_testsite2_cok_insert1_bwd_chk ) == IO_ON )
		GridColor( iGrid, 14, 12, RGB(0,128,0), WHITE_C);		else	GridColor( iGrid, 14, 12, RGB(128,255,128), BLACK_C );

	// hifix
	if( g_ioMgr.get_out_bit( st_io.o_testsite2_hifix_clamp, IO_ON) == IO_ON )
		GridColor( iGrid, 15, 11, RGB(255,128,64), WHITE_C );		else	GridColor( iGrid, 15, 11, RGB(128,64,0), BLACK_C );
	if( g_ioMgr.get_in_bit( st_io.i_testsite2_hifix_clamp_chk ) == IO_ON )
		GridColor( iGrid, 15, 12, RGB(0,128,0), WHITE_C);		else	GridColor( iGrid, 15, 12, RGB(128,255,128), BLACK_C );

	if( g_ioMgr.get_in_bit( st_io.i_testsite2_hifix_chk) == IO_ON )
		GridColor( iGrid, 16, 11, RGB(0,128,0), WHITE_C);		else	GridColor( iGrid, 16, 11, RGB(128,255,128), BLACK_C );


	// COK
	if( g_ioMgr.get_in_bit( st_io.i_testsite1_cok10_chk ) == IO_ON )
		GridColor( iGrid, 1, 13, RGB(0,128,0), WHITE_C);		else	GridColor( iGrid, 1, 13, RGB(128,255,128), BLACK_C );
	if( g_ioMgr.get_in_bit( st_io.i_testsite1_cok9_chk ) == IO_ON )
		GridColor( iGrid, 2, 13, RGB(0,128,0), WHITE_C);		else	GridColor( iGrid, 2, 13, RGB(128,255,128), BLACK_C );
	if( g_ioMgr.get_in_bit( st_io.i_testsite1_cok8_chk ) == IO_ON )
		GridColor( iGrid, 3, 13, RGB(0,128,0), WHITE_C);		else	GridColor( iGrid, 3, 13, RGB(128,255,128), BLACK_C );
	if( g_ioMgr.get_in_bit( st_io.i_testsite1_cok7_chk ) == IO_ON )
		GridColor( iGrid, 4, 13, RGB(0,128,0), WHITE_C);		else	GridColor( iGrid, 4, 13, RGB(128,255,128), BLACK_C );
	if( g_ioMgr.get_in_bit( st_io.i_testsite1_cok6_chk ) == IO_ON )
		GridColor( iGrid, 5, 13, RGB(0,128,0), WHITE_C);		else	GridColor( iGrid, 5, 13, RGB(128,255,128), BLACK_C );
	if( g_ioMgr.get_in_bit( st_io.i_testsite1_cok5_chk ) == IO_ON )
		GridColor( iGrid, 6, 13, RGB(0,128,0), WHITE_C);		else	GridColor( iGrid, 6, 13, RGB(128,255,128), BLACK_C );
	if( g_ioMgr.get_in_bit( st_io.i_testsite1_cok4_chk ) == IO_ON )
		GridColor( iGrid, 7, 13, RGB(0,128,0), WHITE_C);		else	GridColor( iGrid, 7, 13, RGB(128,255,128), BLACK_C );
	if( g_ioMgr.get_in_bit( st_io.i_testsite1_cok3_chk ) == IO_ON )
		GridColor( iGrid, 8, 13, RGB(0,128,0), WHITE_C);		else	GridColor( iGrid, 8, 13, RGB(128,255,128), BLACK_C );
	if( g_ioMgr.get_in_bit( st_io.i_testsite1_cok2_chk ) == IO_ON )
		GridColor( iGrid, 9, 13, RGB(0,128,0), WHITE_C);		else	GridColor( iGrid, 9, 13, RGB(128,255,128), BLACK_C );
	if( g_ioMgr.get_in_bit( st_io.i_testsite1_cok1_chk ) == IO_ON )
		GridColor( iGrid, 10, 13, RGB(0,128,0), WHITE_C);		else	GridColor( iGrid, 10, 13, RGB(128,255,128), BLACK_C );
	if( g_ioMgr.get_in_bit( st_io.i_testsite2_cok10_chk ) == IO_ON )
		GridColor( iGrid, 11, 13, RGB(0,128,0), WHITE_C);		else	GridColor( iGrid, 11, 13, RGB(128,255,128), BLACK_C );
	if( g_ioMgr.get_in_bit( st_io.i_testsite2_cok9_chk ) == IO_ON )
		GridColor( iGrid, 12, 13, RGB(0,128,0), WHITE_C);		else	GridColor( iGrid, 12, 13, RGB(128,255,128), BLACK_C );
	if( g_ioMgr.get_in_bit( st_io.i_testsite2_cok8_chk ) == IO_ON )
		GridColor( iGrid, 13, 13, RGB(0,128,0), WHITE_C);		else	GridColor( iGrid, 13, 13, RGB(128,255,128), BLACK_C );
	if( g_ioMgr.get_in_bit( st_io.i_testsite2_cok7_chk ) == IO_ON )
		GridColor( iGrid, 14, 13, RGB(0,128,0), WHITE_C);		else	GridColor( iGrid, 14, 13, RGB(128,255,128), BLACK_C );
	if( g_ioMgr.get_in_bit( st_io.i_testsite2_cok6_chk ) == IO_ON )
		GridColor( iGrid, 15, 13, RGB(0,128,0), WHITE_C);		else	GridColor( iGrid, 15, 13, RGB(128,255,128), BLACK_C );
	if( g_ioMgr.get_in_bit( st_io.i_testsite2_cok5_chk ) == IO_ON )
		GridColor( iGrid, 16, 13, RGB(0,128,0), WHITE_C);		else	GridColor( iGrid, 16, 13, RGB(128,255,128), BLACK_C );
	if( g_ioMgr.get_in_bit( st_io.i_testsite2_cok4_chk ) == IO_ON )
		GridColor( iGrid, 17, 13, RGB(0,128,0), WHITE_C);		else	GridColor( iGrid, 17, 13, RGB(128,255,128), BLACK_C );
	if( g_ioMgr.get_in_bit( st_io.i_testsite2_cok3_chk ) == IO_ON )
		GridColor( iGrid, 18, 13, RGB(0,128,0), WHITE_C);		else	GridColor( iGrid, 18, 13, RGB(128,255,128), BLACK_C );
	if( g_ioMgr.get_in_bit( st_io.i_testsite2_cok2_chk ) == IO_ON )
		GridColor( iGrid, 19, 13, RGB(0,128,0), WHITE_C);		else	GridColor( iGrid, 19, 13, RGB(128,255,128), BLACK_C );
	if( g_ioMgr.get_in_bit( st_io.i_testsite2_cok1_chk ) == IO_ON )
		GridColor( iGrid, 20, 13, RGB(0,128,0), WHITE_C);		else	GridColor( iGrid, 20, 13, RGB(128,255,128), BLACK_C );

	// COK STACKER
	if( g_ioMgr.get_out_bit( st_io.o_cok_stacker_lockunlock, IO_ON) == IO_ON )
		GridColor( iGrid, 1, 15, RGB(255,128,64), WHITE_C );		else	GridColor( iGrid, 1, 15, RGB(128,64,0), BLACK_C );
	if( g_ioMgr.get_in_bit( st_io.i_cok_stacker_lock_chk ) == IO_ON )
		GridColor( iGrid, 1, 16, RGB(0,128,0), WHITE_C);		else	GridColor( iGrid, 1, 16, RGB(128,255,128), BLACK_C );
	if( g_ioMgr.get_in_bit( st_io.i_cok_stacker_unlock_chk ) == IO_ON )
		GridColor( iGrid, 2, 16, RGB(0,128,0), WHITE_C);		else	GridColor( iGrid, 2, 16, RGB(128,255,128), BLACK_C );

	if( g_ioMgr.get_in_bit( st_io.i_cok_stacker_position_chk ) == IO_ON )
		GridColor( iGrid, 3, 15, RGB(0,128,0), WHITE_C);		else	GridColor( iGrid, 3, 15, RGB(128,255,128), BLACK_C );

	if( g_ioMgr.get_in_bit( st_io.i_cok_stacker1_top_chk ) == IO_ON )
		GridColor( iGrid, 4, 15, RGB(0,128,0), WHITE_C);		else	GridColor( iGrid, 4, 15, RGB(128,255,128), BLACK_C );
	if( g_ioMgr.get_in_bit( st_io.i_cok_stacker1_bottom_chk ) == IO_ON )
		GridColor( iGrid, 5, 15, RGB(0,128,0), WHITE_C);		else	GridColor( iGrid, 5, 15, RGB(128,255,128), BLACK_C );

	if( g_ioMgr.get_in_bit( st_io.i_cok_stacker2_top_chk ) == IO_ON )
		GridColor( iGrid, 6, 15, RGB(0,128,0), WHITE_C);		else	GridColor( iGrid, 6, 15, RGB(128,255,128), BLACK_C );
	if( g_ioMgr.get_in_bit( st_io.i_cok_stacker2_bottom_chk ) == IO_ON )
		GridColor( iGrid, 7, 15, RGB(0,128,0), WHITE_C);		else	GridColor( iGrid, 7, 15, RGB(128,255,128), BLACK_C );

	if( g_ioMgr.get_in_bit( st_io.i_cok_stacker3_top_chk ) == IO_ON )
		GridColor( iGrid, 8, 15, RGB(0,128,0), WHITE_C);		else	GridColor( iGrid, 8, 15, RGB(128,255,128), BLACK_C );
	if( g_ioMgr.get_in_bit( st_io.i_cok_stacker3_bottom_chk ) == IO_ON )
		GridColor( iGrid, 9, 15, RGB(0,128,0), WHITE_C);		else	GridColor( iGrid, 9, 15, RGB(128,255,128), BLACK_C );

	if( g_ioMgr.get_in_bit( st_io.i_cok_stacker4_top_chk ) == IO_ON )
		GridColor( iGrid, 10, 15, RGB(0,128,0), WHITE_C);		else	GridColor( iGrid, 10, 15, RGB(128,255,128), BLACK_C );
	if( g_ioMgr.get_in_bit( st_io.i_cok_stacker4_bottom_chk ) == IO_ON )
		GridColor( iGrid, 11, 15, RGB(0,128,0), WHITE_C);		else	GridColor( iGrid, 11, 15, RGB(128,255,128), BLACK_C );

	if( g_ioMgr.get_in_bit( st_io.i_cok_stacker5_top_chk ) == IO_ON )
		GridColor( iGrid, 12, 15, RGB(0,128,0), WHITE_C);		else	GridColor( iGrid, 12, 15, RGB(128,255,128), BLACK_C );
	if( g_ioMgr.get_in_bit( st_io.i_cok_stacker5_bottom_chk ) == IO_ON )
		GridColor( iGrid, 13, 15, RGB(0,128,0), WHITE_C);		else	GridColor( iGrid, 13, 15, RGB(128,255,128), BLACK_C );

	if( g_ioMgr.get_in_bit( st_io.i_cok_stacker6_top_chk ) == IO_ON )
		GridColor( iGrid, 14, 15, RGB(0,128,0), WHITE_C);		else	GridColor( iGrid, 14, 15, RGB(128,255,128), BLACK_C );
	if( g_ioMgr.get_in_bit( st_io.i_cok_stacker6_bottom_chk ) == IO_ON )
		GridColor( iGrid, 15, 15, RGB(0,128,0), WHITE_C);		else	GridColor( iGrid, 15, 15, RGB(128,255,128), BLACK_C );

	//컨베어
	if( g_ioMgr.get_out_bit( st_io.o_bin_conveyor1, IO_ON) == IO_ON )
		GridColor( iGrid, 18, 15, RGB(255,128,64), WHITE_C );		else	GridColor( iGrid, 18, 15, RGB(128,64,0), BLACK_C );
	if( g_ioMgr.get_out_bit( st_io.o_bin_conveyor2, IO_ON) == IO_ON )
		GridColor( iGrid, 19, 15, RGB(255,128,64), WHITE_C );		else	GridColor( iGrid, 19, 15, RGB(128,64,0), BLACK_C );
	if( g_ioMgr.get_out_bit( st_io.o_bin_conveyor3, IO_ON) == IO_ON )
		GridColor( iGrid, 20, 15, RGB(255,128,64), WHITE_C );		else	GridColor( iGrid, 20, 15, RGB(128,64,0), BLACK_C );
}

void CScreen_Motor_With_IO::OnInitMotor()
{
	TSpread* Grid;
	int col = 18;
	int row = 21;
	int i=0;

	int iGrid = IDC_CUSTOM_MOTOR;

	Grid = (TSpread*)GetDlgItem( iGrid );
	Grid -> SetBool(SSB_EDITMODEPERMANENT, TRUE);
	Grid -> SetBool(SSB_SHOWCOLHEADERS, FALSE);
	Grid -> SetBool(SSB_SHOWROWHEADERS, FALSE);
	Grid -> SetBool(SSB_HORZSCROLLBAR, FALSE);
	Grid -> SetBool(SSB_VERTSCROLLBAR, FALSE);
	Grid -> SetMaxRows(row);
	Grid -> SetMaxCols(col);
	
	for( i=0; i<col; i++ )
	{
		if( i % 3 == 0)			Grid->SetColWidthInPixels(i + 1, 110);
		else if( i % 3 == 1)	Grid->SetColWidthInPixels(i + 1, 20);
		else					Grid->SetColWidthInPixels(i + 1, 30);
	}
	
	for( int iy=0; iy<row; iy++ )
	{
		Grid -> SetRowHeightInPixels(iy + 1, 17 );
		for( int ix=0; ix<col; ix++ )
		{
			GridFont( iGrid, iy + 1, ix + 1, 15);
			GridControl(iGrid, STATIC, iy + 1, ix + 1, 0);

			GridColor( iGrid, iy + 1, ix + 1, BLUE_L, BLACK_C );

			if( ix % 3 == 1 )
				GridData( iGrid, iy + 1, ix + 1, "Go" );
			else if( ix % 3 == 2 )
				GridData( iGrid, iy + 1, ix + 1, "Read" );
		}
	}

	// BIN 1 Z
	GridData( iGrid, 1, 1, "BIN 1 Z 탑");		GridColor( iGrid, 1, 1, SKY_C, BLACK_C );
	GridData( iGrid, 2, 1, "BIN 1 Z 대기");			GridColor( iGrid, 2, 1, SKY_C, BLACK_C );
	GridData( iGrid, 3, 1, "BIN 1 Z 회전");			GridColor( iGrid, 3, 1, SKY_C, BLACK_C );
	GridData( iGrid, 4, 1, "BIN 1 Z 들기");			GridColor( iGrid, 4, 1, SKY_C, BLACK_C );
	GridData( iGrid, 5, 1, "BIN 1 Z 바닥");			GridColor( iGrid, 5, 1, SKY_C, BLACK_C );

	// BIN 1 R
	GridData( iGrid, 6, 1, "BIN 1 R 기본");			GridColor( iGrid, 6, 1, PINK_D, BLACK_C );
	GridData( iGrid, 7, 1, "BIN 1 R 회전");			GridColor( iGrid, 7, 1, PINK_D, BLACK_C );

	// BIN 2 Z
	GridData( iGrid, 8, 1, "BIN 2 Z 탑");		GridColor( iGrid, 8, 1, SKY_C, BLACK_C );
	GridData( iGrid, 9, 1, "BIN 2 Z 대기");			GridColor( iGrid, 9, 1, SKY_C, BLACK_C );
	GridData( iGrid, 10, 1, "BIN 2 Z 회전");		GridColor( iGrid, 10, 1, SKY_C, BLACK_C );
	GridData( iGrid, 11, 1, "BIN 2 Z 들기");		GridColor( iGrid, 11, 1, SKY_C, BLACK_C );
	GridData( iGrid, 12, 1, "BIN 2 Z 바닥");		GridColor( iGrid, 12, 1, SKY_C, BLACK_C );

	// BIN 2 R
	GridData( iGrid, 13, 1, "BIN 2 R 기본");		GridColor( iGrid, 13, 1, PINK_D, BLACK_C );
	GridData( iGrid, 14, 1, "BIN 2 R 회전");		GridColor( iGrid, 14, 1, PINK_D, BLACK_C );

	// BIN 3 Z
	GridData( iGrid, 15, 1, "BIN 3 Z 탑");		GridColor( iGrid, 15, 1, SKY_C, BLACK_C );
	GridData( iGrid, 16, 1, "BIN 3 Z 대기");		GridColor( iGrid, 16, 1, SKY_C, BLACK_C );
	GridData( iGrid, 17, 1, "BIN 3 Z 회전");		GridColor( iGrid, 17, 1, SKY_C, BLACK_C );
	GridData( iGrid, 18, 1, "BIN 3 Z 들기");		GridColor( iGrid, 18, 1, SKY_C, BLACK_C );
	GridData( iGrid, 19, 1, "BIN 3 Z 바닥");		GridColor( iGrid, 19, 1, SKY_C, BLACK_C );

	// BIN 3 R
	GridData( iGrid, 20, 1, "BIN 3 R 기본");		GridColor( iGrid, 20, 1, PINK_D, BLACK_C );
	GridData( iGrid, 21, 1, "BIN 3 R 회전");		GridColor( iGrid, 21, 1, PINK_D, BLACK_C );

	// TR Y
	GridData( iGrid, 1, 4, "TR Y 리젝트");			GridColor( iGrid, 1, 4, YELLOW_L, BLACK_C );
	GridData( iGrid, 2, 4, "TR Y BIN 3");			GridColor( iGrid, 2, 4, YELLOW_L, BLACK_C );

	// TR CLAMP
	GridData( iGrid, 3, 4, "TR 클램프 열기");		GridColor( iGrid, 3, 4, YELLOW_L, BLACK_C );
	GridData( iGrid, 4, 4, "TR 클램프 잡기");		GridColor( iGrid, 4, 4, YELLOW_L, BLACK_C );

	// REJECT TRAY STACKER
	GridData( iGrid, 6, 4, "REJ 1장");				GridColor( iGrid, 6, 4, GREEN_L, BLACK_C );
	GridData( iGrid, 7, 4, "REJ 5장");				GridColor( iGrid, 7, 4, GREEN_L, BLACK_C );

	// ROBOT Z
	GridData( iGrid, 1, 7, "로봇Z 세이프티");			GridColor( iGrid, 1, 7, YELLOW_L, BLACK_C );
	GridData( iGrid, 2, 7, "로봇Z S1 PLACE 시작");		GridColor( iGrid, 2, 7, SKY_C, BLACK_C );
	GridData( iGrid, 3, 7, "로봇Z S1 PLACE 끝");		GridColor( iGrid, 3, 7, SKY_C, BLACK_C );
	GridData( iGrid, 4, 7, "로봇Z S1 PICK 시작");		GridColor( iGrid, 4, 7, SKY_C, BLACK_C );
	GridData( iGrid, 5, 7, "로봇Z S1 PICK 끝");		GridColor( iGrid, 5, 7, SKY_C, BLACK_C );
	GridData( iGrid, 6, 7, "로봇Z S2 PLACE 시작");		GridColor( iGrid, 6, 7, PINK_D, BLACK_C );
	GridData( iGrid, 7, 7, "로봇Z S2 PLACE 끝");		GridColor( iGrid, 7, 7, PINK_D, BLACK_C );
	GridData( iGrid, 8, 7, "로봇Z S2 PICK 시작");		GridColor( iGrid, 8, 7, PINK_D, BLACK_C );
	GridData( iGrid, 9, 7, "로봇Z S2 PICK 끝");		GridColor( iGrid, 9, 7, PINK_D, BLACK_C );
	GridData( iGrid, 10, 7, "로봇Z TRAY1 PLACE");		GridColor( iGrid, 10, 7, YELLOW_L, BLACK_C );
	GridData( iGrid, 11, 7, "로봇Z TRAY1 PICK");		GridColor( iGrid, 11, 7, YELLOW_L, BLACK_C );
	GridData( iGrid, 12, 7, "로봇Z TRAY2 PLACE");		GridColor( iGrid, 12, 7, YELLOW_L, BLACK_C );
	GridData( iGrid, 13, 7, "로봇Z TRAY2 PICK");		GridColor( iGrid, 13, 7, YELLOW_L, BLACK_C );
	GridData( iGrid, 14, 7, "로봇Z REJ PLACE");			GridColor( iGrid, 14, 7, GREEN_L, BLACK_C );
	GridData( iGrid, 15, 7, "로봇Z REJ PICK");			GridColor( iGrid, 15, 7, GREEN_L, BLACK_C );
	
	GridData( iGrid, 10, 4, "로봇Z S1 COK PLACE 시작");		GridColor( iGrid, 10, 4, SKY_C, BLACK_C );
	GridData( iGrid, 11, 4, "로봇Z S1 COK PLACE 끝");		GridColor( iGrid, 11, 4, SKY_C, BLACK_C );
	GridData( iGrid, 12, 4, "로봇Z S1 COK PICK 시작");		GridColor( iGrid, 12, 4, SKY_C, BLACK_C );
	GridData( iGrid, 13, 4, "로봇Z S1 COK PICK 끝");		GridColor( iGrid, 13, 4, SKY_C, BLACK_C );
	GridData( iGrid, 14, 4, "로봇Z S2 COK PLACE 시작");		GridColor( iGrid, 14, 4, PINK_D, BLACK_C );
	GridData( iGrid, 15, 4, "로봇Z S2 COK PLACE 끝");		GridColor( iGrid, 15, 4, PINK_D, BLACK_C );
	GridData( iGrid, 16, 4, "로봇Z S2 COK PICK 시작");		GridColor( iGrid, 16, 4, PINK_D, BLACK_C );
	GridData( iGrid, 17, 4, "로봇Z S2 COK PICK 끝");		GridColor( iGrid, 17, 4, PINK_D, BLACK_C );
	GridData( iGrid, 18, 4, "로봇Z COK ST PLACE 시작");		GridColor( iGrid, 18, 4, YELLOW_L, BLACK_C );
	GridData( iGrid, 19, 4, "로봇Z COK ST PLACE 끝");		GridColor( iGrid, 19, 4, YELLOW_L, BLACK_C );
	GridData( iGrid, 20, 4, "로봇Z COK ST PICK 시작");		GridColor( iGrid, 20, 4, YELLOW_L, BLACK_C );
	GridData( iGrid, 21, 4, "로봇Z COK ST PICK 끝");		GridColor( iGrid, 21, 4, YELLOW_L, BLACK_C );

	// ROBOT X
	GridData( iGrid, 1, 10, "로봇X 세이프티");		GridColor( iGrid, 1, 10, YELLOW_L, BLACK_C );
	GridData( iGrid, 2, 10, "로봇X SITE1 시작");		GridColor( iGrid, 2, 10, SKY_C, BLACK_C );
	GridData( iGrid, 3, 10, "로봇X SITE1 끝");		GridColor( iGrid, 3, 10, SKY_C, BLACK_C );
	GridData( iGrid, 4, 10, "로봇X SITE2 시작");		GridColor( iGrid, 4, 10, SKY_C, BLACK_C );
	GridData( iGrid, 5, 10, "로봇X SITE2 끝");		GridColor( iGrid, 5, 10, SKY_C, BLACK_C );
	GridData( iGrid, 6, 10, "로봇X TRAY1 시작");		GridColor( iGrid, 6, 10, PINK_D, BLACK_C );
	GridData( iGrid, 7, 10, "로봇X TRAY1 끝");		GridColor( iGrid, 7, 10, PINK_D, BLACK_C );
	GridData( iGrid, 8, 10, "로봇X TRAY2 시작");		GridColor( iGrid, 8, 10, PINK_D, BLACK_C );
	GridData( iGrid, 9, 10, "로봇X TRAY2 끝");		GridColor( iGrid, 9, 10, PINK_D, BLACK_C );
	GridData( iGrid, 10, 10, "로봇X REJ 시작");		GridColor( iGrid, 10, 10, SKY_C, BLACK_C );
	GridData( iGrid, 11, 10, "로봇X REJ 끝");		GridColor( iGrid, 11, 10, SKY_C, BLACK_C );
	GridData( iGrid, 12, 10, "로봇X COK S1 시작");	GridColor( iGrid, 12, 10, GREEN_L, BLACK_C );
	GridData( iGrid, 13, 10, "로봇X COK S1 끝");		GridColor( iGrid, 13, 10, GREEN_L, BLACK_C );
	GridData( iGrid, 14, 10, "로봇X COK S2 시작");	GridColor( iGrid, 14, 10, GREEN_L, BLACK_C );
	GridData( iGrid, 15, 10, "로봇X COK S2 끝");		GridColor( iGrid, 15, 10, GREEN_L, BLACK_C );
	GridData( iGrid, 16, 10, "로봇X COK ST 시작");	GridColor( iGrid, 16, 10, SKY_C, BLACK_C );
	GridData( iGrid, 17, 10, "로봇X COK ST 끝");		GridColor( iGrid, 17, 10, SKY_C, BLACK_C );

	// ROBOT Y
	GridData( iGrid, 1, 13, "로봇Y 세이프티");		GridColor( iGrid, 1, 13, YELLOW_L, BLACK_C );
	GridData( iGrid, 2, 13, "로봇Y SITE1 시작");		GridColor( iGrid, 2, 13, SKY_C, BLACK_C );
	GridData( iGrid, 3, 13, "로봇Y SITE1 끝");		GridColor( iGrid, 3, 13, SKY_C, BLACK_C );
	GridData( iGrid, 4, 13, "로봇Y SITE2 시작");		GridColor( iGrid, 4, 13, SKY_C, BLACK_C );
	GridData( iGrid, 5, 13, "로봇Y SITE2 끝");		GridColor( iGrid, 5, 13, SKY_C, BLACK_C );
	GridData( iGrid, 6, 13, "로봇Y TRAY1 시작");		GridColor( iGrid, 6, 13, PINK_D, BLACK_C );
	GridData( iGrid, 7, 13, "로봇Y TRAY1 끝");		GridColor( iGrid, 7, 13, PINK_D, BLACK_C );
	GridData( iGrid, 8, 13, "로봇Y TRAY2 시작");		GridColor( iGrid, 8, 13, PINK_D, BLACK_C );
	GridData( iGrid, 9, 13, "로봇Y TRAY2 끝");		GridColor( iGrid, 9, 13, PINK_D, BLACK_C );
	GridData( iGrid, 10, 13, "로봇Y REJ 시작");		GridColor( iGrid, 10, 13, SKY_C, BLACK_C );
	GridData( iGrid, 11, 13, "로봇Y REJ 끝");		GridColor( iGrid, 11, 13, SKY_C, BLACK_C );
	GridData( iGrid, 12, 13, "로봇Y COK S1 시작");	GridColor( iGrid, 12, 13, GREEN_L, BLACK_C );
	GridData( iGrid, 13, 13, "로봇Y COK S1 끝");		GridColor( iGrid, 13, 13, GREEN_L, BLACK_C );
	GridData( iGrid, 14, 13, "로봇Y COK S2 시작");	GridColor( iGrid, 14, 13, GREEN_L, BLACK_C );
	GridData( iGrid, 15, 13, "로봇Y COK S2 끝");		GridColor( iGrid, 15, 13, GREEN_L, BLACK_C );
	GridData( iGrid, 16, 13, "로봇Y COK ST 시작");	GridColor( iGrid, 16, 13, SKY_C, BLACK_C );
	GridData( iGrid, 17, 13, "로봇Y COK ST 끝");		GridColor( iGrid, 17, 13, SKY_C, BLACK_C );

	// TEST SITE
	GridData( iGrid, 1, 16, "SITE 1 COK CHANGE");		GridColor( iGrid, 1, 16, SKY_C, BLACK_C );
	GridData( iGrid, 2, 16, "SITE 1 COK 1");			GridColor( iGrid, 2, 16, SKY_C, BLACK_C );
	GridData( iGrid, 3, 16, "SITE 1 COK 2");			GridColor( iGrid, 3, 16, SKY_C, BLACK_C );
	GridData( iGrid, 4, 16, "SITE 1 COK 3");			GridColor( iGrid, 4, 16, SKY_C, BLACK_C );
	GridData( iGrid, 5, 16, "SITE 1 COK 4");			GridColor( iGrid, 5, 16, SKY_C, BLACK_C );
	GridData( iGrid, 6, 16, "SITE 1 COK 5");			GridColor( iGrid, 6, 16, SKY_C, BLACK_C );
	GridData( iGrid, 7, 16, "SITE 1 COK 6");			GridColor( iGrid, 7, 16, SKY_C, BLACK_C );
	GridData( iGrid, 8, 16, "SITE 2 COK CHANGE");		GridColor( iGrid, 8, 16, PINK_D, BLACK_C );
	GridData( iGrid, 9, 16, "SITE 2 COK 1");			GridColor( iGrid, 9, 16, PINK_D, BLACK_C );
	GridData( iGrid, 10, 16, "SITE 2 COK 2");			GridColor( iGrid, 10, 16, PINK_D, BLACK_C );
	GridData( iGrid, 11, 16, "SITE 2 COK 3");			GridColor( iGrid, 11, 16, PINK_D, BLACK_C );
	GridData( iGrid, 12, 16, "SITE 2 COK 4");			GridColor( iGrid, 12, 16, PINK_D, BLACK_C );
	GridData( iGrid, 13, 16, "SITE 2 COK 5");			GridColor( iGrid, 13, 16, PINK_D, BLACK_C );
	GridData( iGrid, 14, 16, "SITE 2 COK 6");			GridColor( iGrid, 14, 16, PINK_D, BLACK_C );
	
	// COK 
	GridData( iGrid, 17, 16, "COK ROBOT Y 시작");			GridColor( iGrid, 17, 16, GREEN_L, BLACK_C );
	GridData( iGrid, 18, 16, "COK ROBOT Y 끝");			GridColor( iGrid, 18, 16, GREEN_L, BLACK_C );
	
	GridData( iGrid, 19, 16, "COK ROBOT Z SAFETY");			GridColor( iGrid, 19, 16, YELLOW_L, BLACK_C );
	GridData( iGrid, 20, 16, "COK ROBOT Y 1개");			GridColor( iGrid, 20, 16, YELLOW_L, BLACK_C );
	GridData( iGrid, 21, 16, "COK ROBOT Y 20개");			GridColor( iGrid, 21, 16, YELLOW_L, BLACK_C );
}

void CScreen_Motor_With_IO::On_GoMotor( int nAxis, double dGotoPos, int row, int col )
{
	if( nAxis < 0 )
		return;

	if( st_handler.mn_menu_lock )
		return;

	if (COMI.mn_motorbd_init_end != TRUE)  
	{
		if (DoModal_Msg( g_local.Get("L_M_0000") ) == IDOK)
			return ;
	}
		
	GETMOTOR( (ENUM_MOTOR)nAxis ).SetMotGotoPos( dGotoPos );
	
	int nResponse = Func.OnMotor_Go_Check(nAxis, dGotoPos);
	
	if (nResponse != IDOK)
	{
		return;
	}
	
	m_nGo_row = row;
	m_nGo_col = col;
	
	GridData( IDC_CUSTOM_MOTOR, m_nGo_row, m_nGo_col, "...");
	GridColor( IDC_CUSTOM_MOTOR, m_nGo_row, m_nGo_col, RED_L, BLACK_C);
	
	if (st_handler.mn_menu_lock != TRUE)
	{
		st_handler.mn_menu_lock = TRUE;
	}
	// =============================================================================
	
	GETMOTOR( (ENUM_MOTOR)nAxis ).MotorStepClear();
	GETMOTOR( (ENUM_MOTOR)nAxis ).MotorMoveStart( dGotoPos, st_basic.nManualSpeed, MMMODE_WITH_IO_MOVE );
}

LRESULT CScreen_Motor_With_IO::OnMotorCompletion( WPARAM wParam,LPARAM lParam )
{
	if (st_handler.mn_menu_lock != FALSE)
	{
		st_handler.mn_menu_lock = FALSE;
	}
	// ==============================================================================

	if( m_nGo_col > 0 && m_nGo_row > 0 )
	{
		GridData( IDC_CUSTOM_MOTOR, m_nGo_row, m_nGo_col, "Go" );
		GridColor( IDC_CUSTOM_MOTOR, m_nGo_row, m_nGo_col, BLUE_L, BLACK_C);
	}

	m_btn_go.EnableWindow( TRUE );

	m_nGo_col = -1;
	m_nGo_row = -1;

	return 0;
}

void CScreen_Motor_With_IO::OnDestroy() 
{
	CFormView::OnDestroy();
	
	// TODO: Add your message handler code here
	KillTimer( TMR_WITH_IO_READ );

	st_handler.cwnd_motor_with_io = NULL;
	
}

void CScreen_Motor_With_IO::OnInitTarget_TestSite()
{
	TSpread* Grid;
	int col = 2;
	int row = 10;
	int i=0;

	int iGrid = IDC_CUSTOM_TARGET_SITE;

	Grid = (TSpread*)GetDlgItem( iGrid );
	Grid -> SetBool(SSB_EDITMODEPERMANENT, TRUE);
	Grid -> SetBool(SSB_SHOWCOLHEADERS, FALSE);
	Grid -> SetBool(SSB_SHOWROWHEADERS, FALSE);
	Grid -> SetBool(SSB_HORZSCROLLBAR, FALSE);
	Grid -> SetBool(SSB_VERTSCROLLBAR, FALSE);
	Grid -> SetMaxRows(row);
	Grid -> SetMaxCols(col);
	
	Grid->SetColWidthInPixels(1, 24);
	Grid->SetColWidthInPixels(2, 24);
	
	for( int iy=0; iy<row; iy++ )
	{
		Grid -> SetRowHeightInPixels(iy + 1, 15 );
		for( int ix=0; ix<col; ix++ )
		{
			GridFont( iGrid, iy + 1, ix + 1, 15);
			GridControl(iGrid, STATIC, iy + 1, ix + 1, 0);

			GridColor( iGrid, iy + 1, ix + 1, WHITE_C, BLACK );

			CString strNo; strNo.Format("%d", iy + 1 );
			GridData( iGrid, iy + 1, ix + 1, strNo );
		}
	}

	Grid = NULL;
	delete Grid;
}

void CScreen_Motor_With_IO::OnInitTarget_Robot()
{
	TSpread* Grid;
	int col = 2;
	int row = 4;
	int i=0;

	int iGrid = IDC_CUSTOM_TARGET_ROBOT;

	Grid = (TSpread*)GetDlgItem( iGrid );
	Grid -> SetBool(SSB_EDITMODEPERMANENT, TRUE);
	Grid -> SetBool(SSB_SHOWCOLHEADERS, FALSE);
	Grid -> SetBool(SSB_SHOWROWHEADERS, FALSE);
	Grid -> SetBool(SSB_HORZSCROLLBAR, FALSE);
	Grid -> SetBool(SSB_VERTSCROLLBAR, FALSE);
	Grid -> SetMaxRows(row);
	Grid -> SetMaxCols(col);
	
	Grid->SetColWidthInPixels(1, 20);
	Grid->SetColWidthInPixels(2, 20);
	
	for( int iy=0; iy<row; iy++ )
	{
		Grid -> SetRowHeightInPixels(iy + 1, 20 );
		for( int ix=0; ix<col; ix++ )
		{
			GridFont( iGrid, iy + 1, ix + 1, 15);
			GridControl(iGrid, STATIC, iy + 1, ix + 1, 0);

			GridColor( iGrid, iy + 1, ix + 1, WHITE_C, BLACK );

			if( ix != 0 )

			{
				CString strNo; strNo.Format("%d", 4 - iy );
				GridData( iGrid, iy + 1, ix + 1, strNo );
			}
		}
	}

	GridMerge( iGrid, 1, 1, 4, 1 );
	GridData(iGrid, 1, 1, "GRIP");

	Grid = NULL;
	delete Grid;
}

void CScreen_Motor_With_IO::OnInitTarget_Tray( int iGrid )
{
	TSpread *Grid;

	int col = st_basic.n_tray_x;
	int row = st_basic.n_tray_y;
	
	if( (st_basic.n_degree == EDEG_90 || st_basic.n_degree == EDEG_270 ) )
	{
		row = st_basic.n_tray_x;
		col = st_basic.n_tray_y;
	}
	
	Grid = (TSpread*)GetDlgItem( iGrid );
	Grid -> SetBool(SSB_EDITMODEPERMANENT, TRUE);
	Grid -> SetBool(SSB_SHOWCOLHEADERS, FALSE);
	Grid -> SetBool(SSB_SHOWROWHEADERS, FALSE);
	Grid -> SetBool(SSB_HORZSCROLLBAR, FALSE);
	Grid -> SetBool(SSB_VERTSCROLLBAR, FALSE);
	Grid -> SetMaxRows(row);
	Grid -> SetMaxCols(col);
	
	for( int iw=0; iw<row; iw++ )
	{
		Grid -> SetRowHeightInPixels(iw + 1, 100 / row );
		for( int ih=0; ih<col; ih++ )
		{
			if( iw == 0 )
				Grid -> SetColWidthInPixels(ih + 1, 100 / col );
			
			GridFont( iGrid, iw + 1, ih + 1, 15);
			GridColor( iGrid, iw + 1, ih + 1, WHITE_C, BLACK_C);
			GridControl(iGrid, STATIC, iw + 1, ih + 1, 0);

			int iMdlIdx = GetMdlIdx( ih, iw, col, row, true );
			CString strIdx;
			strIdx.Format( "%02d", iMdlIdx );
			GridData( iGrid, iw + 1, ih + 1, strIdx );
		}
	}
	
	Grid = NULL;
	delete Grid;
}

void CScreen_Motor_With_IO::OnUpdateTarget_testSite()
{
	for( int ix = 0; ix<2; ix++ )
	{
		for( int iy=0; iy< 10; iy++ )
		{
			GridColor( IDC_CUSTOM_TARGET_SITE, iy + 1, ix + 1, WHITE_C, BLACK_C );
		}
	}

	if( m_nRobot != -1 )
	{
		if( m_nTarget < 20 )
		{
			GridColor( IDC_CUSTOM_TARGET_SITE, (m_nTarget % 5) * 2 + 1, (m_nTarget / 5) + 1, RED_C, BLACK_C);
			GridColor( IDC_CUSTOM_TARGET_SITE, (m_nTarget % 5) * 2 + 2, (m_nTarget / 5) + 1, RED_C, BLACK_C);
		}
	}
	else
	{
		if( m_nTarget >= 20 && m_nTarget < 100 )
		{
			GridColor( IDC_CUSTOM_TARGET_SITE, (m_nTarget % 10) + 1, (m_nTarget / 10 ) - 1, RED_C, BLACK_C );
		}
	}
}

void CScreen_Motor_With_IO::OnUpdateTarget_Robot()
{
	GridColor( IDC_CUSTOM_TARGET_ROBOT, 1, 1, WHITE_C, BLACK_C );

	GridColor( IDC_CUSTOM_TARGET_ROBOT, 1, 2, WHITE_C, BLACK_C );
	GridColor( IDC_CUSTOM_TARGET_ROBOT, 2, 2, WHITE_C, BLACK_C );
	GridColor( IDC_CUSTOM_TARGET_ROBOT, 3, 2, WHITE_C, BLACK_C );
	GridColor( IDC_CUSTOM_TARGET_ROBOT, 4, 2, WHITE_C, BLACK_C );

	if( m_nRobot < 0 )
	{
		GridColor( IDC_CUSTOM_TARGET_ROBOT, 1, 1, RED_C, BLACK_C );
	}
	else
	{
		GridColor( IDC_CUSTOM_TARGET_ROBOT, m_nRobot + 1, 2, RED_C, BLACK_C );
	}
}

void CScreen_Motor_With_IO::OnUpdateTarget_Tray( int iGrid )
{
	int col = st_basic.n_tray_x;
	int row = st_basic.n_tray_y;
	
	if( (st_basic.n_degree == EDEG_90 || st_basic.n_degree == EDEG_270 ) )
	{
		row = st_basic.n_tray_x;
		col = st_basic.n_tray_y;
	}
	
	for( int iw=0; iw<row; iw++ )
	{
		for( int ih=0; ih<col; ih++ )
		{
			GridColor( iGrid, iw + 1, ih + 1, WHITE_C, BLACK_C);
		}
	}

	switch( iGrid )
	{
	case IDC_CUSTOM_TARGET_TRAY1:
		if( GetPosByTarget(m_nTarget) == MPOS_INDEX_BIN1 )
		{
			int x = g_handler.CalctargetIdx( MOTOR_ROBOT_X, m_nTarget );
			int y = g_handler.CalctargetIdx( MOTOR_ROBOT_Y, m_nTarget );
			GridColor( iGrid, y + 1, x + 1, RED_C, BLACK_C);
		}
		break;

	case IDC_CUSTOM_TARGET_TRAY2:
		if( GetPosByTarget(m_nTarget) == MPOS_INDEX_BIN2 )
		{
			int x = g_handler.CalctargetIdx( MOTOR_ROBOT_X, m_nTarget );
			int y = g_handler.CalctargetIdx( MOTOR_ROBOT_Y, m_nTarget );
			GridColor( iGrid, y + 1, x + 1, RED_C, BLACK_C);
		}
		break;

	case IDC_CUSTOM_TARGET_REJECT:
		if( GetPosByTarget(m_nTarget) == MPOS_INDEX_REJ )
		{
			int x = g_handler.CalctargetIdx( MOTOR_ROBOT_X, m_nTarget );
			int y = g_handler.CalctargetIdx( MOTOR_ROBOT_Y, m_nTarget );
			GridColor( iGrid, y + 1, x + 1, RED_C, BLACK_C);
		}
		break;
	}
	

}

void CScreen_Motor_With_IO::OnBtnRobotGo() 
{
	// TODO: Add your control notification handler code here
	if( m_nTarget < 0 )
		return;

	if (st_handler.mn_menu_lock != TRUE)
	{
		st_handler.mn_menu_lock = TRUE;
	}
	// =============================================================================
	double dPosX = g_handler.CalcTargetPosition( MOTOR_ROBOT_X, PLACE, m_nTarget, m_nRobot );
	double dPosY = g_handler.CalcTargetPosition( MOTOR_ROBOT_Y, PLACE, m_nTarget, m_nRobot );


	
	GETMOTOR( MOTOR_ROBOT_Z ).MotorStepClear();
	GETMOTOR( MOTOR_ROBOT_Z ).MotorLinearStart( dPosX, dPosY, st_basic.nManualSpeed, MMMODE_WITH_IO_MOVE );
	
	m_btn_go.EnableWindow( FALSE );

}

void CScreen_Motor_With_IO::OnInitMotorInfo()
{
	TSpread *Grid;

	int col = 2;
	int row = 3;
	int iGrid = IDC_CUSTOM_WITH_IO_MOTOR_INFO;
	
	Grid = (TSpread*)GetDlgItem( iGrid );
	Grid -> SetBool(SSB_EDITMODEPERMANENT, TRUE);
	Grid -> SetBool(SSB_SHOWCOLHEADERS, FALSE);
	Grid -> SetBool(SSB_SHOWROWHEADERS, FALSE);
	Grid -> SetBool(SSB_HORZSCROLLBAR, FALSE);
	Grid -> SetBool(SSB_VERTSCROLLBAR, FALSE);
	Grid -> SetMaxRows(row);
	Grid -> SetMaxCols(col);
	
	for( int iw=0; iw<row; iw++ )
	{
		Grid -> SetRowHeightInPixels(iw + 1, 15 );
		for( int ih=0; ih<col; ih++ )
		{
			if( iw == 0 )
				Grid -> SetColWidthInPixels(ih + 1, 109 );
			
			GridFont( iGrid, iw + 1, ih + 1, 15);
			GridColor( iGrid, iw + 1, ih + 1, YELLOW_L, BLACK_C);
			GridControl(iGrid, STATIC, iw + 1, ih + 1, 0);
		}
	}

	GridMerge(iGrid, 1, 1, 1, 2 );
	GridData( iGrid, 2, 1, "POWER" );
	GridData( iGrid, 2, 2, "ALARM" );
	GridData( iGrid, 3, 1, "POSITION" );
	
	Grid = NULL;
	delete Grid;
}

void CScreen_Motor_With_IO::OnUpdateMotorInfo()
{
	if( m_nAxis < 0 )
		return;

	int iGrid = IDC_CUSTOM_WITH_IO_MOTOR_INFO;

	if( m_nAxis != m_nAxis_old )
	{
		GridData( iGrid, 1, 1, Func.Get_MotorName( m_nAxis ) );
		m_nAxis_old = m_nAxis;
	}

	int nPower = g_comiMgr.Get_MotPower( m_nAxis );
	if( nPower == 0 )
	{
		GridColor( iGrid, 2, 1, BLACK_C, WHITE_C );
	}
	else
	{
		GridColor( iGrid, 2, 1, RED_C, BLACK_C );
	}

	int nAlarm = COMI.Get_MotAlarmStatus( m_nAxis );
	if( nAlarm == 0 )
	{
		GridColor( iGrid, 2, 2, BLACK_C, WHITE_C );
	}
	else
	{
		GridColor( iGrid, 2, 2, RED_C, BLACK_C );
	}

	CString strPos;
	strPos.Format( "%.03f", g_comiMgr.Get_MotCurrentPos(m_nAxis) );

	if( strPos != m_strPos_old )
	{
		GridData( iGrid, 3, 2, strPos );
		m_strPos_old = strPos;
	}
}

void CScreen_Motor_With_IO::OnBtnHome() 
{
	// TODO: Add your control notification handler code here
	if (st_handler.mn_menu_lock != TRUE)
	{
		st_handler.mn_menu_lock = TRUE;
	}

	if( m_nAxis < 0 )
		return;
	
	GETMOTOR( (ENUM_MOTOR)m_nAxis ).MotorStepClear();
	GETMOTOR( (ENUM_MOTOR)m_nAxis ).MotorHomeStart();
}

void CScreen_Motor_With_IO::OnBtnEmgStop() 
{
	if( m_nAxis < 0 )
		return;

	GETMOTOR( (ENUM_MOTOR)m_nAxis ).SetStopReq( true );
}

LONG CScreen_Motor_With_IO::OnUserLButtonDown(WPARAM wParam, LPARAM lParam)
{
	if( m_nAxis < 0 )
		return 0;

	int		nRet;
	
	nRet = Func.DoorOpenCheckSpot();
	
	if (nRet == CTLBD_RET_ERROR)
		return 0;

	// Velocity-Move(Jog) 모드일때만 WM_LBUTTONDOWN 이벤트를 처리한다. //
	// Rel/Abs Position Mode에서는 WM_LBUTTONUP 이벤트에서 이송 명령을 //
	// 처리한다.                                                       //
	CButtonST *pButton = (CButtonST *)lParam;

	nRet = pButton->GetTag();

	if (pButton->GetTag() == IDC_BTN_MINUS)
	{ // "Jog (-)" 버튼이 눌린 경우...
		nRet = CTL_Lib.Motor_SafetyCheck(0, m_nAxis, 0);
			
		if (nRet == CTLBD_RET_ERROR)
		{
			return 0;
		}

		EMOTRET motRet = GETMOTOR( (ENUM_MOTOR)m_nAxis ).JogMoveStart( MINUS );
		if( motRet == MOTRET_ERROR )		cmmErrShowLast(GetSafeHwnd());
		else								st_handler.mn_menu_lock = FALSE;
	}
	else if (pButton->GetTag() == IDC_BTN_PLUS)
	{ 
		nRet = CTL_Lib.Motor_SafetyCheck(0, m_nAxis, 0);
		
		if (nRet == CTLBD_RET_ERROR)
			return 0;
		
		EMOTRET motRet = GETMOTOR( (ENUM_MOTOR)m_nAxis ).JogMoveStart( PLUS );
		
		if( motRet == MOTRET_ERROR )		cmmErrShowLast(GetSafeHwnd());
		else								st_handler.mn_menu_lock = FALSE;
	}

	return 0;
}

LONG CScreen_Motor_With_IO::OnUserLButtonUp(WPARAM wParam, LPARAM lParam)
{	
	if( m_nAxis < 0 )
		return 0;

	int		nRet;

	CButtonST *pButton = (CButtonST *)lParam;

	nRet = pButton->GetTag();

	if (pButton->GetTag() == IDC_BTN_MINUS)
	{ // "Jog (-)" 버튼이 눌린 경우...
		cmmSxStop(m_nAxis, FALSE, TRUE);  // 모터 이동 정지 함수 
	}
	else if (pButton->GetTag() == IDC_BTN_PLUS)
	{ 
		cmmSxStop(m_nAxis, FALSE, TRUE);  // 모터 이동 정지 함수 
	}

	return 0;
}