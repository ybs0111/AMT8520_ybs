#if !defined(AFX_EXCOM_H__62AB6D17_1BA6_48DE_A46F_32F1253D819B__INCLUDED_)
#define AFX_EXCOM_H__62AB6D17_1BA6_48DE_A46F_32F1253D819B__INCLUDED_

#if _MSC_VER > 1000
#pragma once
#endif // _MSC_VER > 1000
// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.

/////////////////////////////////////////////////////////////////////////////
// CeXCom wrapper class

class CeXCom : public CWnd
{
protected:
	DECLARE_DYNCREATE(CeXCom)
public:
	CLSID const& GetClsid()
	{
		static CLSID const clsid
			= { 0x28672df6, 0xd5fa, 0x468a, { 0x95, 0x4d, 0xe5, 0x98, 0x1e, 0x58, 0xf7, 0x5f } };
		return clsid;
	}
	virtual BOOL Create(LPCTSTR lpszClassName,
		LPCTSTR lpszWindowName, DWORD dwStyle,
		const RECT& rect,
		CWnd* pParentWnd, UINT nID,
		CCreateContext* pContext = NULL)
	{ return CreateControl(GetClsid(), lpszWindowName, dwStyle, rect, pParentWnd, nID); }

    BOOL Create(LPCTSTR lpszWindowName, DWORD dwStyle,
		const RECT& rect, CWnd* pParentWnd, UINT nID,
		CFile* pPersist = NULL, BOOL bStorage = FALSE,
		BSTR bstrLicKey = NULL)
	{ return CreateControl(GetClsid(), lpszWindowName, dwStyle, rect, pParentWnd, nID,
		pPersist, bStorage, bstrLicKey); }

// Attributes
public:
	short GetDeviceID();
	void SetDeviceID(short);
	short GetStream();
	void SetStream(short);
	short GetFunction();
	void SetFunction(short);
	long GetSystemBytes();
	void SetSystemBytes(long);
	short GetWbit();
	void SetWbit(short);
	short GetRbit();
	void SetRbit(short);
	short GetEbit();
	void SetEbit(short);
	short GetPType();
	void SetPType(short);
	short GetSType();
	void SetSType(short);
	short GetBlock();
	void SetBlock(short);
	long GetHeaderSize();
	void SetHeaderSize(long);
	long GetMsgSize();
	void SetMsgSize(long);

// Operations
public:
	short Initialize(LPCTSTR sCfgFile);
	short Close();
	short Start();
	short Stop();
	short MakeSecsMsg(long* plMsgId, short nDevId, short nStrm, short nFunc, long lSysByte);
	short Send(long lMsgId);
	short LoadSecsMsg(long* plMsgId, short* pnDevId, short* pnStrm, short* pnFunc, long* plSysByte, short* pnWbit);
	void CloseSecsMsg(long lMsgId);
	short GetListItem(long lMsgId, short* pnItems);
	short GetBinaryItem(long lMsgId, short* pnValue, long* plCount, long lSize);
	short GetBoolItem(long lMsgId, short* pnValue, long* plCount, long lSize);
	short GetAsciiItem(long lMsgId, BSTR* psValue, long* plCount);
	short GetJis8Item(long lMsgId, BSTR* psValue, long* plCount);
	short GetI1Item(long lMsgId, short* pnValue, long* plCount, long lSize);
	short GetI2Item(long lMsgId, short* pnValue, long* plCount, long lSize);
	short GetI4Item(long lMsgId, long* plValue, long* plCount, long lSize);
	short GetI8Item(long lMsgId, long* plValue, long* plCount, long lSize);
	short GetU1Item(long lMsgId, short* pnValue, long* plCount, long lSize);
	short GetU2Item(long lMsgId, long* plValue, long* plCount, long lSize);
	short GetU4Item(long lMsgId, double* prValue, long* plCount, long lSize);
	short GetU8Item(long lMsgId, double* prValue, long* plCount, long lSize);
	short GetF4Item(long lMsgId, float* prValue, long* plCount, long lSize);
	short GetF8Item(long lMsgId, double* prValue, long* plCount, long lSize);
	short SetListItem(long lMsgId, short nItems);
	short SetBinaryItem(long lMsgId, short* pnValue, long lCount);
	short SetBoolItem(long lMsgId, short* pnValue, long lCount);
	short SetAsciiItem(long lMsgId, LPCTSTR pszValue, long lCount);
	short SetJis8Item(long lMsgId, LPCTSTR pszValue, long lCount);
	short SetI1Item(long lMsgId, short* pnValue, long lCount);
	short SetI2Item(long lMsgId, short* pnValue, long lCount);
	short SetI4Item(long lMsgId, long* plValue, long lCount);
	short SetI8Item(long lMsgId, long* plValue, long lCount);
	short SetU1Item(long lMsgId, short* pnValue, long lCount);
	short SetU2Item(long lMsgId, long* plValue, long lCount);
	short SetU4Item(long lMsgId, double* prValue, long lCount);
	short SetU8Item(long lMsgId, double* prValue, long lCount);
	short SetF4Item(long lMsgId, float* prValue, long lCount);
	short SetF8Item(long lMsgId, double* prValue, long lCount);
	short EnableLog(short nLogType, short nEnabled);
	short GetHeaderBytes(long lMsgId, short* pnHeader, short nSize);
	long GetMsgBytes(long lMsgId, short* pnMsg, long lSize);
	short SetHeaderBytes(long lMsgId, short* pnHeader, short nSize);
	long SetMsgBytes(long lMsgId, short* pnMsg, long lSize);
	short GetAlarmMsgInfo(long lMsgId, short* pnDevId, short* pnStrm, short* pnFunc, long* plSysByte, short* pnWbit);
	short DebugInfo(short* pnInfo);
	long GetSysBytes(long lMsgId);
	short SetStringItem(long lMsgId, BSTR* pbstrValue, long lCount);
	short SetWBit(long lMsgId, short nWBit);
	short GetInvalidMsgInfo(long lMsgId, short* pnDevId, short* pnStrm, short* pnFunc, long* plSysByte, short* pnWbit);
	short MakeSpoolStream(long lMsgId);
	short ProcExternalStream(short* pnMsg, long lSize);
	CString GetParam(LPCTSTR pszParamName);
	short SetParam(LPCTSTR psParamName, LPCTSTR psVal);
	CString GetStringItem(long lMsgId, long* plCount);
	short SetAsciiFillSpace(short nVal);
	long GeneralCall(long lMsgId, short nDispatchId, long lpDispatchData, long lDispatchArg1, long lDispatchArg2);
	short GetCurrentItemType(long lMsgId);
	long GetCurrentItemCount(long lMsgId);
	CString GetSecsLog(long lMsgId);
	short BeginList(long lMsgId);
	short EndList(long lMsgId);
};

//{{AFX_INSERT_LOCATION}}
// Microsoft Visual C++ will insert additional declarations immediately before the previous line.

#endif // !defined(AFX_EXCOM_H__62AB6D17_1BA6_48DE_A46F_32F1253D819B__INCLUDED_)
